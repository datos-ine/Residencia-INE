---
title: "**Lectura de datos**"
format:
  html:
    page-layout: full
    toc: true
    toc-title: Contenidos
    toc-location: left
    toc_float: true
    toc_collapsed: false
    toc_depth: 4
    include-in-header: 
      - text: |
          <link rel="icon" type="image/x-icon" href="img/favicon.ico">
number_sections: true
anchor_sections: true
---

Estando dentro de un proyecto nos vamos a desentender de la ubicación de los archivos que deseemos leer, dado que siempre las funciones de lectura buscaran en la carpeta asociada al proyecto.

Por lo tanto los archivos de datos deberán guardarse dentro de esa carpeta o en su defecto en alguna subcarpeta incluida dentro del mismo proyecto.

En **RStudio** podemos visualizar el contenido desde el **panel Files** o bien podemos ejecutar:

```{r}
dir(path = "datos")  #devuelve el contenido del directorio 
```
En el ejemplo los archivos se encuentran en la subcarpeta **datos** del proyecto.

## Archivos texto plano

Para determinar la forma de lectura de archivos tipo **csv** o de **texto plano separados por algún caracter** necesitamos que nos indiquen previamente el formato o debemos investigar por nuestra cuenta.

Vamos a tratar de leer el archivo **"Dieta.csv"** 

Para esto podemos utilizar el panel File y pulsando sobre el archivo visualizar el contenido con **View File**

Debemos prestar atención a la cabecera del archivo y al caracter que aparece separando las columnas.

En este caso vemos que tiene cabecera y el separador es la coma (,)

Podemos utilizar `read_csv()` de **readr**, pero antes tenemos que activar tidyverse

```{r}
#| message: false
#| warning: false

library(tidyverse)

read_csv(file = "datos/Dieta.csv")
```

`read_csv()` efectivamente hizo la lectura pero solo lo muestra en consola

Por qué?

Bien, porque necesitamos **asignar** la lectura a un nombre que será el nombre del dataframe 

```{r}
dieta <- read_csv(file = "datos/Dieta.csv")
```


Que pasa si me equivoco y aplico mal la función, por ejemplo:

```{r}
read_csv2(file = "datos/Dieta.csv")
```


Una primera revisión, cada vez que hacemos alguna lectura, es verificar la cantidad de variables. Aquí al elegir mal la función de lectura no se detecta el caracter separador (busca un ;) y por ende las 7 columnas/variables se fusionan en una sola.

- Ahora lean el archivo **"CancerMama.csv"**

- A continuación revisemos el contenido del archivo **farmaco.txt**

1. Que separador utiliza?

2. Qué función podemos aplicar para su lectura?



## Archivos Excel

Activamos el paquete para hacer lecturas de archivos Excel

```{r}
library(readxl)
```


Tenemos un archivo de Excel para practicar, se llama **datos.xlsx**

Ábranlo y vean el contenido de las tres hojas

con la función `excel_sheets()` también podemos ver cuantas hojas tiene y como se llaman

```{r}
excel_sheets(path = "datos/datos.xlsx")
```


Vamos con la primer hoja

```{r}
datos1 <- read_excel(path = "datos/datos.xlsx", 
                     sheet = 1)
```


que es lo mismo que hacer: `datos1 <- read_excel("datos/datos.xlsx")` ya que asume 1 en sheet de forma predeterminada.

Con la hoja 2 tenemos un problema:

```{r}
datos2 <- read_excel(path = "datos/datos.xlsx",
                     sheet = 2)

datos2

```

Cómo se soluciona?



Vamos con la tercera llamada Poblacion

Hay dos tablas dentro de la misma hoja, cómo podemos hacer la lectura?

```{r}
pob2010 <- read_excel(path = "datos/datos.xlsx", 
                      sheet = "Poblacion", 
                      range = "A4:D25")
```

## Hagan lo mismo para leer la otra tabla con range y guardenla como pob2021



