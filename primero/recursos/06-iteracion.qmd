---
title:  "**Operaciones múltiples e iteración**"
format:
  html:
    page-layout: full
    include-in-header: 
      - text: |
          <link rel="icon" type="image/x-icon" href="favicon.ico">    
    toc: true
    toc-title: Contenidos
    toc-location: left
    toc_float: true
    toc_collapsed: false
    toc_depth: 4
number_sections: true
anchor_sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
```


Muchas de las tareas que hicimos hasta ahora, ya sea transformando u obteniendo resultados resumenes de variables, las aplicamos variable a variable, es decir repitiendo las operaciones para cada una de las columnas de una tabla.

Una premisa del tidyverse, y también de la programación en general, es no copiar y pegar el código mas de dos veces. Si bien esta práctica ahorra tiempo y no esta mal en si mismo, hacerlo suele ser una fuente de errores y además incrementa las líneas de código del script.

## Operaciones múltiples

![](img/06/across.PNG){fig-align="center" width="300"}

El paquete **dplyr** de *tidyverse* implementa desde hace poco tiempo un esquema de trabajo para operaciones múltiples o simultáneas a través de su función `across()`.

Esta función se puede utilizar en estructuras de `mutate()` o `summarise()` dependiendo del resultado buscado y tiene dos partes fundamentales: la captura o selección de variables donde vamos a aplicar determinadas funciones y la declaración de las funciones a aplicar.

### `across()`

La función se incorporó a partir de la versión de dplyr 1.0.0 y su sintaxis general es:

```{r}
#| eval: false
#| echo: true

across(.cols,  
       .fns,  
       ...,  
       .names)
```

donde los argumentos son:

`.cols` = columnas a transformar

`.fns` = función o funciones para aplicar a cada columna de .cols

`...` = argumentos adicionales de las funciones especificadas anteriormente (ejemplo: na.rm = T)

`.names` = nombres de las columnas de salida. Aquí, {.col} es un marcador especial al que se le puede agregar el sufijo deseado.

### Aplicación en resúmenes

Veamos un ejemplo de uso para situaciones donde queremos obtener resumenes simultáneos.

Tomemos la siguiente tabla de datos ficticios:

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)

set.seed(123)

datos <- tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```

```{r}
#| echo: true

datos
```

Supongamos que queremos calcular la media de cada variable numérica, con lo que sabemos hasta ahora podríamos hacerlo repitiendo para cada variable.

```{r}
#| echo: true

datos |> summarise(
  a = mean(a),
  b = mean(b),
  c = mean(c),
  d = mean(d),
)
```

Pero esto rompe la regla general que buscamos de nunca copiar y pegar más de dos veces, ocasionando que me pueda equivocar al editar el nombre de la variable que va en cada `mean()` y generando tantas líneas de código como cantidad de variables tengo.

Para solucionarlo vamos a aplicar `across()` realizando el resumen simultáneo en una sola línea.

```{r}
#| echo: true

datos |> summarise(
  across(.cols = a:d, 
         .fns = mean),
)

```

Observemos que el primer argumento es el rango de nombres de variables que estamos seleccionando donde aplicar la función que aperece como segundo argumento.

Es decir, que el primer argumento de la función responde de la misma forma que la función `select()` y por ende, aplican también las *funciones ayudantes de selección*.

::: columns
::: {.column width="50%"}
-   `everything()`: coincide con todas las variables.

-   `group_cols()`: seleccione todas las columnas de agrupación.

-   `starts_with()`: comienza con un prefijo.

-   `ends_with()`: termina con un sufijo.

-   `contains()`: contiene una cadena literal.

-   `matches()`: coincide con una expresión regular.
:::

::: {.column width="50%"}
-   `num_range()`: coincide con un rango numérico como x01, x02, x03.

-   `all_of()`: coincide con nombres de variables en un vector de caracteres. Todos los nombres deben estar presentes; de lo contrario, se generará un error de fuera de límites.

-   `any_of()`: igual que `all_of()`, excepto que no se genera ningún error para los nombres que no existen.

-   `where()`: aplica una función a todas las variables y selecciona aquellas para las cuales la función regresa TRUE.
:::
:::

Mostremos otra tabla de ejemplo similar a la anterior:

```{r}
#| echo: false

datos <- tibble(
  grupo = sample(c("A", "B"), 10, replace = TRUE),
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```

```{r}
#| echo: true

datos
```

Aquí **datos** agrega una variable categórica llamada `grupo` con dos valores (A y B).

Usando `group_by()` combinada con una selección completa (ayudante everything) del resto de las variables obtenemos las medias por cada uno de estos grupos.

```{r}
#| echo: true

datos |> 
  group_by(grupo) |> 
  summarise(across(everything(), mean))
```

El argumento `.cols` también puede recibir construcciones *booleanas* utilizando los operadores conocidos como `!` (negación) y conectores lógicos como `&` (AND) y `|` (OR) entre las funciones ayudantes de selección.

```{r}
#| echo: true
#| eval: false

.cols = !where(is.numeric) & starts_with("a")
```

En este ejemplo, se seleccionan todas las columnas no numéricas, cuyo nombre comienza con "a".

Hasta ahora vimos el ejemplo de aplicar una función simple como `mean()` a un grupo de variables.

Que sucede si entre los datos de esas variables hay valores **NA**?

```{r}
#| echo: false

set.seed(123)

rnorm_na <- function(n, n_na, mean = 0, sd = 1) {
  sample(c(rnorm(n - n_na, mean = mean, sd = sd), rep(NA, n_na)))
}

datos_na <- tibble(
  a = rnorm_na(5, 1),
  b = rnorm_na(5, 1),
  c = rnorm_na(5, 2),
  d = rnorm(5)
)
```

```{r}
#| echo: true

datos_na
```

Vamos a necesitar incorporar el argumento `na.rm = TRUE` a la función `mean()` porque si no el resultado será:

```{r}
#| echo: true

datos_na |> summarise(
  across(.cols = a:d, 
         .fns = mean),
)

```

Como lo hacemos dentro de un `across()`? 

Existen dos formas sintácticas de realizarlo.

-   Una función estilo-purrr (tidyverse) que tiene la forma `~ mean(.x, na.rm = TRUE)`

-   Una función anónima de R base mediante `function(x) mean(x, na.rm = TRUE)` o más sencilla en su forma de atajo: `\(x) mean(x, na.rm = TRUE)`

```{r}
#| echo: true

# forma tidyverse (purrr)

datos_na |> 
  summarise(
    across(a:d, ~ mean(.x, na.rm = TRUE))
  )
```

```{r}
#| echo: true

# forma R base (atajo función anómina)

datos_na |> 
  summarise(
    across(a:d, \(x) mean(x, na.rm = TRUE))
  )
```

Se le llama función anónima justamente porque no hace falta ponerle nombre. Acostumbrarse a esta notación es más útil que la forma del tidyverse porque aplica también para otras funciones. 

Para incorporar más de una función dentro de `across()` debemos incluirlas dentro de una lista \[`list()`\]

```{r}
#| echo: true

datos_na |> 
  summarise(
    across(a:d, list(
      media = \(x) mean(x, na.rm = TRUE),
      desvio = \(x) sd(x, na.rm = TRUE),
      n_na = \(x) sum(is.na(x))))
  )
```

La lista contiene cada función a aplicar, bajo nombres definidos a la izquierda del igual. El resultado muestra 12 variables producto de hacer tres operaciones en cada una de las 4 variables de la tabla.

Observemos que los nombres de las variables resultado se componen del nombre de la columna, un guión bajo y el nombre definido de la función aplicada (`variable_funcion`)

La estructura de estos nombres se pueden modificar con el argumento `.names`.

El marcador especial para el nombre de columna es `{.col}` y para el nombre de la función definida es `{.fn}`.

Por ejemplo, podríamos invertir el orden predeterminado de los nombres del resumen (`funcion_variable`)

```{r}
#| echo: true

datos_na |> 
  summarise(
    across(a:d, list(
      media = \(x) mean(x, na.rm = TRUE),
      n_na = \(x) sum(is.na(x))),
      .names = "{.fn}_{.col}")
  )
```

### Aplicación en conversión o creación de nuevas variables

Hasta el momento trabajamos con la función `across()` dentro de un resumen (`summarise`) pero al comienzo también dijimos que se puede utilizar para transformaciones masivas de datos.

La plataforma para lograr esto es `mutate()` y lo podemos usar  modificando las variables originales o bien creando nuevas variables si cambiamos su nombre con `.names`.

Para ejemplificar, aplicaremos la función `coalesce()` perteneciente a dplyr, para convertir los valores **NA** en ceros, transformando las variables originales anteriores.

```{r}
#| echo: true

datos_na |> 
  mutate(
    across(a:d, \(x) coalesce(x, 0))
  )
```
Si no agregamos ningún otro argumento el reemplazo de los valores **NA** por 0 se realiza en cada variable sobrescribiendo las observaciones.

En cambio, si queremos que coexistan las variables originales con las nuevas incluyendo estos cambios podemos declarar en el argumento `.names` la estructura de los nombres nuevos. 

```{r}
#| echo: true

datos_na |> 
  mutate(
    across(a:d, \(x) coalesce(x, 0),
      .names = "{.col}_na_cero")
  )
```
Otras conversiones posibles pueden utilizar funciones de reemplazo para variables cuantitativas como por ejemplo `exp()`, `log()`, `scale()`, etc. O bien convertir a factor variables character y hasta  aplicar funciones condicionales como `if_else()` o `case_when()`.  

## Filtros con iteraciones

El paquete **dplyr** trae consigo algunas funciones iterativas emparentadas con `across()` para usar dentro de estructuras de filtro -`filter()`-, es el caso de `if_any()` e `if_all()`.

`if_any()` enmascara una repetición de **OR** lógicos `if_all()` una secuencia de **AND** lógicos.

Usémoslas con los datos con los que venimos trabajando.

```{r}
#| echo: true

datos_na |> 
  filter(if_any(a:d, is.na))
```

Devuelve las observaciones donde en alguna de las variables encuentra algún NA.

Es lo mismo que `filter(is.na(a) | is.na(b) | is.na(c) | is.na(d))`



```{r}
#| echo: true

datos_na |> 
  filter(if_all(a:d, is.na))
```

Devuelve las observaciones donde en todas las variables encuentra valores NA. En este caso no hay ninguna que cumpla esa condición, por eso el resultado es un dataframe vacío.

Es lo mismo que `filter(is.na(a) & is.na(b) & is.na(c) & is.na(d))`

Una forma rápida de armar filtros por múltiples variables escribiendo poco código.

Las dos funciones de filtro trabajan con el mismo esquema que `across()`, por lo tanto se le puede aplicar una función o expresión de condición (todas deben devolver `TRUE` o `FALSE`)


```{r}
#| echo: true

datos |> 
  filter(if_all(a:d, \(x) x > -0.5 & x < 1))
```

Acá el valor de cada en todas las observaciones filtradas debe estar en el rango -0,5 a 1. Hay una que cumple la condición en las 4 variables numéricas.

## Operaciones por fila

La filosofía del tidy-data, es particularmente adecuada para realizar operaciones por columnas (variables). Todas las funciones de resúmenes toman los valores de forma vertical para realizar una operación, como si tuviesemos vectores "parados" dentro de un dataframe.

Hay algunas circunstancias que nos lleva a necesitar realizar operaciones por filas y por supuesto esto es mucho más difícil. 

El paquete **dplyr** incorporó en sus últimas versiones la función  `rowwise()` que implementa un agrupamiento por cada fila, haciendo que sea más sencillo hacer estas tareas.

El uso más común es hacer calculos agregados por filas (por ejemplo, calcular la media de x, y, z).

La apariencia de los resultados de la función son similares a `group_by()` donde solo vemos cambios en los metadatos del dataframe que luego van a ser aprovechados por las funciones siguientes.

Tenemos un pequeño dataframe de prueba:

```{r}
#| echo: false


df <- tibble(x = 1:2, y = 3:4, z = 5:6)

df
```

Y aplicamos la función `rowwise()`

```{r}
#| echo: true

df |> 
  rowwise()
```
Lo único que vemos es la aparición de un metadatos que dice "rowwise". Significa que las filas de la tabla está agrupadas a lo ancho y las funciones que vengan despues van a respetar este agrupamiento.

Para ver los cambios que produce este agrupamiento veamos un ejemplo comparativo.

```{r}
df |>  
  mutate(m = mean(c(x, y, z)))

df |> 
  rowwise() |> 
  mutate(m = mean(c(x, y, z)))
```

Si usamos `mutate()` con un dataframe normal, calcula la media de x, y, z tomando los valores de todas las filas. Si lo aplicamos a una tabla con **rowwise**, calcula la media de cada fila, tomando los valores de cada una de las tres variables.

Opcionalmente, se puede indicar variables como "identificador". 

Estas variables se conservan cuando se llama a un `summarise()` por ejemplo, por lo que se comportan de manera similar a las variables de agrupación pasadas a `group_by()`.

Cambiamos el dataframe que ahora es:


```{r}
#| echo: false


df <- tibble(nombre = c("Mercurio", "Venus"), x = 1:2, y = 3:4, z = 5:6)

df
```

```{r}


df |> 
  rowwise() |>   
  summarise(m = mean(c(x, y, z)))


df  |>  
  rowwise(nombre) |>  
  summarise(m = mean(c(x, y, z)))

```

`rowwise()` es solo una forma especial de agrupación por fila, por lo que si deseamos eliminarla de una tabla, simplemente llamamos a `ungroup()`.

### `c_across()`

La versión de `across()` para operaciones simultáneas por filas se llama `c_across()` y tiene los mismos fundamentos aplicados a estas situaciones, aunque es mucho más sencilla dado que no tiene argumentos extras.

Aplicada sobre el último dataframe:

```{r}
df  |>  
  rowwise(nombre) |>  
  summarise(m = mean(c_across(x:z)))
```

O bien, seleccionando los tipos de datos numéricos:

```{r}
df  |>  
  rowwise(nombre) |>  
  summarise(m = mean(c_across(where(is.numeric))))
```

Sin duda este abordaje tiene mayor utilidad cuando las operaciones por fila contemplan muchas variables.

## Bucles tradicionales

Un bucle es una estructura de control que permite ejecutar un conjunto de instrucciones repetidamente mientras se cumple una condición específica. Los bucles, se encuentran en todos los lenguajes de programación y se utilizan para automatizar tareas repetitivas (iterar).

El lenguaje R también los implementa en sus paquetes base y dispone de tres de ellos:

> `for()`: estructura de control de flujo de iteración a partir de una secuencia de elementos

> `while()`: estructura de control de flujo de iteración mientras una condición es verdadera

> `repeat()`: estructura de control de flujo de iteración de repetición y control manual con `break`

### Bucle for

La idea principal de este bucle es repetir un bloque de código un número específico de veces o para cada elemento en objeto (vector, etc).

Su esquema de funcionamiento es el siguiente:

![](img/06/for.png){fig-align="center" width="400"}

La estructura sintáctica viene dada por un *snippet* que RStudio escribe por nosotros:

```{r}
#| echo: true
#| eval: false
for (variable in vector) {
  
}
```


Un ejemplo sencillo que muestra su funcionamiento puede ser.

```{r}
for (i in 1:5) {
  cat("El valor de i es:", i, "\n")
}
```
Lo que estamos haciendo es recorriendo un vector numérico de 5 posiciones, declarado bajo el nombre de **i** y luego entre llaves se encuentra el código que escribe en pantalla un texto fijo que incluye a los valores de **i** en cada repetición.



El mismo formato de bucle puede recorrer posiciones y/o elementos de un objeto de la siguiente forma:

```{r}
x <- c(6, 4, 3, 8)

for (i in 1:length(x)) {
  print(x[i]*4)     # utiliza la i para recorrer los elementos de x por su indice
}
```
Recorre el vector x y multiplica cada elemento por 4. Lo mismo que hace R vectorizadamente de manera simple.

```{r}
x * 4
```
Por supuesto que la mayoría de las tareas que R ejecuta de forma vectorizada hace que no tengamos que usar esta forma de bucle para operaciones comunes pero, a veces cuando el código dentro de las llaves es extenso y complejo será necesario.

### Bucle while

Este bucle se repite mientras la condición especificada es evaluada como verdadera (TRUE). Si en algún momento la condición se evalúa como falsa (FALSE), el bucle se detiene y la ejecución continúa con el código después del bucle.

Su esquema de funcionamiento es el siguiente:

![](img/06/while.png){fig-align="center" width="400"}

Su *snippet* es:

```{r}
#| echo: true
#| eval: false
while (condition) {
  
}
```

Un ejemplo posible muestra que primero inicializamos una variable **i** que servirá como contador, luego escribimos una condición en el inicio del bucle indicando que recién saldremos de él cuando esta variable sea igual a 6 y finalmente dentro de las llaves armamos el código que se va a repetir no olvidando de la sumatoria del contador **i**.

```{r}
i <- 1

while (i <= 5) {
  cat("El valor de i es:", i, "\n")
  i <- i + 1
}
```
El último de los bucles, `repeat()` no tiene automatizada su salida y necesita que incorporemos dentro de su cuerpo entre llaves la función `break` a partir de alguna condición (se suele utilizar la estructura condicional `if()`). Esta forma de trabajo lo hace peligroso porque suelen generar bucles infinitos de donde no hay salida, salvo la interrupción abrupta del interprete.

Dado que su construcción es muy artesanal no vamos a mostrarlo en este documento. Su uso no será necesario durante el curso y probablemente no lo necesiten aplicar en el futuro.

## Mapeos con purrr

El patrón de iterar sobre un vector o variable, hacer algo con cada elemento u observación y almacenar los resultados es tan común que el paquete **purrr** incluído en  tidyverse aporta una familia de funciones dedicadas a esta tarea. 

Hay una función para cada tipo de output:

`map()` crea una lista.
`map_lgl()` crea un vector lógico.
`map_int()` crea un vector de enteros.
`map_dbl()` crea un vector de numérico (double).
`map_chr()` crea un vector de caracteres.
`map_df()`  crea un dataframe

Cada función **map**, mapea, es decir, toma un vector como input, aplica una función a cada elemento y luego devuelve un nuevo vector que tiene la misma longitud (y los mismos nombres) que el input. El tipo de vector está determinado por el sufijo de la función map.

![](img/06/map.png){fig-align="center" width="400"}

Su estructura sintáctica es:

```{r}
#| echo: true
#| eval: false
map(.x = , 
    .f = , 
    ... = )
```

Donde en `.x` es un vector, un data-frame o lista, `.f` es la función a aplicar y `...` son otros argumentos opcionales.

Las funciones map tienen un nivel superior de abstracción y puede llevar mucho tiempo entender cómo funcionan. 

Algunos usuarios evitan los bucles tradicionales porque son lentos o "viejos", pero esto no es así. Las principales ventajas de usar funciones como `map()` no es la velocidad, sino la claridad: hacen que tu código sea más fácil de escribir y leer.

Unos ejemplos simples de uso son:

```{r}
# a partir del dataframe datos utilizado anteriormente

datos

map_dbl(.x = datos, .f = mean)
```
Calcula la media por cada una de las variables numéricas. Como la variable grupo no lo es me devuelve una advertencia y un NA como resultado.

Si quisiera evitarlo podemos hacer.

```{r}
map_dbl(.x = datos |> select(-grupo), 
        .f = mean)
```
Observen que dentro del argumento `.x` construimos una estructura con tuberías donde seleccionamos a todas las variables menos a **grupo** (esto se puede hacer en los argumentos de muchas funciones).

## Aplicación de un bucle tradicional

Mostramos un ejemplo posible donde necesitamos aplicar un bucle para iterar una serie de repeticiones.

Este ejemplo consiste en leer un archivo habitual en el trabajo epidemiológico como son las proyecciones poblacionales que publica el INDEC luego de cada censo. En este caso particular son proyecciones que van desde 2010 a 2040 para las 24 provincias de Argentina por quinquenios y sexo.

La tabla tiene este formato:

![](img/06/poblaciones.PNG){fig-align="center" width="700"}


Cada provincia se ubica en una hoja del archivo Excel y la estructura de las proyecciones no tiene un formato que reconozcamos como ordenado. El objetivo es producir un dataframe donde nos queden 4 variables (Edad, Sexo, Provincia, Poblacion) con los datos de las proyecciones para 2024.

Lo primero que vamos hacer es almacenar en un vector los nombres de las hojas del archivo.
Usando la función `excel_sheets()` extraemos estos codigo-nombres (la expresión de índices `[-(1:2)]` sirve para omitir los nombres de la primera hoja oculta que tiene el archivo llamada "GraphData" y la segunda donde esta el total país).

```{r}
library(readxl)

hojas <- excel_sheets("datos/c2_proyecciones_prov_2010_2040.xls")[-(1:2)]
```

Nos va a quedar el vector **hojas** con los nombres de las 24 provincias que figuran en las hojas Excel.

```{r}
hojas
```
Para aprovechar el contenido vamos a construir otro vector con los códigos solos. Aplicamos la función `str_sub()` sobre **hojas**.

```{r}
provincias <- str_sub(hojas, start = 1, end = 2)
```


```{r}
provincias 
```

A continuación vamos a necesitar separar la parte que no se repite y la parte que si. Por ejemplo, la columna donde está la edad cada 5 años es una parte fija que no necesaria volver a leer en cada hoja del archivo, en cambio las poblaciones si varían entre provincia y provincia.

```{r}
#| message: false
grupo_edad <- read_excel("datos/c2_proyecciones_prov_2010_2040.xls", 
                         sheet = 2, range = "A36:A56", col_names = F)  |>  
  rename("Edad" = "...1")
```

Leemos el archivo **"c2_proyecciones_prov_2010_2040.xls"** en su segunda hoja (la primera era la occulta) y con el rango "A36:A56". Desactivamos nombres de columnas y renombramos con el nombre `Edad`. Podríamos haber leído cualquiera de las 24 hojas porque la columna de edad es la misma para todas.

```{r}
grupo_edad
```
Nos queda un dataframe de nombre **grupo_edad** con 1 variable (Edad) y 21 observaciones.

Ahora, antes de comenzar con las repeticiones del bucle, debemos estructurar el dataframe contenedor de estas lecturas iterativas.

```{r}
poblacion <- data.frame(Varon = NA, Mujer = NA, Provincia = NA, Edad = NA)
```

Creamos **poblacion** como un dataframe con 4 variables Varon, Mujer, Provincia y Edad con datos vacíos (NA).

```{r}
poblacion
```

Estamos en condiciones de utilizar un bucle for para ir rellenando el dataframe **poblacion** con las lecturas del archivo Excel.

```{r}
#| message: false
#| warning: false
for (i in 1:length(hojas)) {
  datai <- read_excel("datos/c2_proyecciones_prov_2010_2040.xls", 
                     sheet = hojas[i], range = "K64:L84", col_names = F)
  
  datai <- datai |> mutate(Provincia = provincias[i]) |> 
             rename("Varon" = "...1",
                    "Mujer" = "...2") |> 
             bind_cols(grupo_edad) 
  
  poblacion <- poblacion  |>  bind_rows(datai)
}
```

Analicemos la estructura del `for()` y el contenido del cuerpo encerrado entre llaves:

- Utilizamos la longitud del vector **hojas** para que la cantidad de repeticiones del bucle sea igual a la cantidad de hojas del archivo (serán 24 repeticiones, 1 por hoja)

```{r}
1:length(hojas)
```
- La primera línea del cuerpo crea el objeto **datai** que lee las poblaciones para el año 2024 de varones y mujeres usando un rango que deberemos construir mirando las ubicaciones dentro del archivo Excel. Además usamos la variable **i** del `for()` para recorrer el vector hojas que tiene el nombre de cada una de las 24 provincias idénticas a las hojas del archivo, por lo que en la vuelta 1 leera el rango de la hoja 02-CABA, en la segunda la de 06-BUENOS AIRES y así hasta la última (94-TIERRA DEL FUEGO).

- La segunda estructura de código agrega a **datai** el código de la provincia en cada repetición recorriendo con la variable **i** el vector **provincias**. Luego renombra las cabeceras sin nombre para Varon y Mujer y finalmente une por columna con `bind_cols()` las edades. Esta forma es la misma en nombre de variables, posición y tipo de datos que el contenedor creado previamente (**poblacion**).

- Por último, une por filas con `bind_rows()` a **datai** con **poblacion**.

La operación construye un dataframe con dimensiones [ `r dim(poblacion)` ], es decir, 505 observaciones por 4 variables.

Hay dos problemas finales para resolver, uno es que la primera observación es la de valores NA que usamos cuando creamos el contenedor.

```{r}
poblacion |> slice(1:4)
```

Con `drop_na()` la podemos eliminar sin mayores problemas.

```{r}
poblacion <- poblacion |> drop_na() # eliminamos primera linea con NA
```

El otro inconveniente es que la tabla final no cumple con los datos ordenados, porque Varon y Mujer no deberían ser nombres de variables sino categorías de la variable Sexo.

Aplicamos lo que sabemos de pivoteos con **tidyr** para arreglarlo.

```{r}
poblacion <- poblacion |> 
               pivot_longer(cols = c(Varon, Mujer), 
                            names_to = "Sexo",
                            values_to = "Poblacion")
```

El resultado final es la tabla buscada con poblaciones proyectada por el INDEC de las 24 provincias por sexo y grupos de edades quinquenales en formato tidy-data:

```{r}
poblacion
```

## Aplicación de una iteración map

Imaginemos que tenemos varios archivos de datos con la misma estructura producto de la vigilancia epidemiológica o de un estudio de cohorte donde cada uno de ellos pertenece a un mes. Para analizar todo un año en una sola tabla final, deberíamos leer 12 archivos de nombres diferentes y luego unir los datos uno debajo del otro.

Queremos hacer este trabajo pero simplificando el proceso agilizando el proceso de lectura y obtener una sola tabla con todas las observaciones generando un id que almacene el mes al que pertenece.

Vamos a hacer uso de la función `dis_ls()` del paquete **fs** (file system) que es muy útil cuando debemos hacer operaciones con carpetas y archivos de sistema desde el código (en este caso Windows).

```{r}
library(fs)
```

Con la función `dir_ls()` obtenemos listados de directorio (similar a **dir()** de la línea de comandos de Windows). 

Si en la carpeta están solos los archivos de datos no hay que aclarar nada más pero si hay otros se puede usar el argumento *glob* para definir un patrón de búsqueda. Para que esto funcione bien los archivos tienen que tener un mismo formato en su nombre. Por ejemplo, aprovechando el formato de estos archivos vamos a usar el patrón "datos_*" dentro de una subcarpeta denominada datos. 

```{r}
archivos <- dir_ls(path = "datos", 
                   glob = "datos/datos_*") 
  
archivos
```
Quedaron almacenados en el vector **archivos** los 12 nombres de los archivos mensuales. Observemos que tienen el formato "datos_mes_vigilancia.csv" y además nos dicen que son de texto plano con separador coma.

A continuación aplicaremos la función `map_df()` del paquete purrr junto a la función `read_csv()` para repetir las lecturas de estos archivos agregando el nombre de cada uno a las observaciones de la tabla final.

```{r}
#| message: false
#| warning: false
datos <- archivos |> 
           map_df(read_csv, .id = "archivo")
```

La primera variable que tendrá el mismo nombre que definimos en el argumento **.id** es el nombre completo del archivo fuente.

```{r}
datos |> count(archivo)
```

En estos datos de ejemplo ficticios hay 157 observaciones de cada uno de los meses, pero en la realidad estas cantidades seguramente son variantes.

Para resolver el problema de que nos quede solamente el nombre del mes usaremos la función `separate_wider_delim()` de **tidyr** indicando que separe el nombre con el delimitador "_" y con el argumento **names** me quede la parte del medio con nombre mes y se deshaga de las constantes "datos" y "vigilancia".

```{r}
datos |> 
  separate_wider_delim(cols = archivo, 
                       delim = "_", 
                       names = c(NA, "mes", NA)) |> 
  count(mes)
```

La estructura completa unida por tuberías nos quedaría:


```{r}
#| message: false
#| warning: false  
datos <- dir_ls(path = "datos", glob = "datos/datos_*")  |> 
  map_df(read_csv, .id = "archivo") |> 
  separate_wider_delim(cols = archivo, 
                       delim = "_", 
                       names = c(NA, "mes", NA)) 
```

El resultado final es que leímos 12 archivos (podrían ser muchos más, todos los que quisiéramos) en tan solo 3 líneas de código unidas por dos tuberías.

```{r}
datos
```


