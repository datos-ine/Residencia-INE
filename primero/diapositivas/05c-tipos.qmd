---
title: "Tipos de datos específicos"
subtitle: "Residencia de Epidemiología"
format: 
  revealjs:
    self-contained: true
    width: 1920
    height: 1080
    slide-number: true
    transition: fade
    theme: [simple, img/custom.scss]
    logo: img/INE.gif
    footer: "Instituto Nacional de Epidemiología"
---

```{r setup, include=F}
#| label: setup
#| include: false


library(quarto)
library(fontawesome)
library(tidyverse)
```

## Tipos de datos {.title-top}

![](img/05c/tipos.PNG){.absolute top="200" left="1200" width="650"}

Los tipos de datos en lenguaje R se reconocen por:

>   **int** (integer): números enteros

>   **num** o **dbl** (numeric): números reales

>   **chr** (character): caracteres (texto)

>   **logi** o **lgl** (logical): valores lógicos

>   **Date**: fechas

>   **dttm** (date-time): fechas y horas

>   **fct** (factor): factores


## Coerciones {.title-top}

::: {style="font-size: 0.8em;"}

Existen funciones de R base que permiten comprobar y coercionar los tipos de datos.

| Tipo      | Comprobación     | Coerción         |
|-----------|------------------|------------------|
| character | `is.character()` | `as.character()` |
| numeric   | `is.numeric()`   | `as.numeric()`   |
| integer   | `is.integer()`   | `as.integer()`   |
| double    | `is.double()`    | `as.double()`    |
| factor    | `is.factor()`    | `as.factor()`    |
| logical   | `is.logical()`   | `as.logical()`   |
| NA        | `is.na()`        | `as.na()`        |

Las coerciones, en ocasiones, provocan que se asignen valores NA porque no son posibles de realizar. 

**Ejemplo**: puedo coercionar un múmero a caracter pero no puedo hacer lo inverso.

:::

## Variables de tiempo {.title-top}

::: {style="font-size: 0.9em;"}

-   Las variables de tiempo pueden estar expresadas en diferentes unidades y formatos (fecha, hora, dia, mes, año, etc...). Dependerá de la tabla de datos, el tipo de estudio, etc.

-   Las fechas y las horas son complicadas porque tienen que reconciliar dos ***fenómenos físicos*** (la rotación de la Tierra y su órbita alrededor del sol), con todo un conjunto de ***fenómenos geopolíticos*** que incluyen: formatos distintos (dd/mm/aaaa - mm/dd/aaaa), husos horarios y horarios de verano (en algunas ocasiones y países).

<br>

- Para pensar lo complejo del asunto contestemos estas preguntas:
  - ¿Todos los años tienen 365 días?
  - ¿Todos los días tienen 24 horas?
  - ¿Cada minuto tiene 60 segundos?

:::

## Sistemas de fechas {.title-top}

Las variables de tiempo nos obliga a gestionar tipos de datos fecha y hora, así como también intervalos entre esos instantes.

Coexisten 2 clases de objetos básicos en el lenguaje R

![](img/05c/Captura1.PNG){fig-align="center"}

**POSIX** (acrónimo de **P**ortable **O**perating **S**ystem **I**nterface, y **X** viene de UNIX como seña de identidad de la API) es una norma escrita por la *IEEE*, que define una interfaz estándar del sistema operativo y el entorno. Los objetos fecha-hora se denominan formalmente tipos `POSIXt`, `POSIXct`, o `POSIXlt` (la diferencia no es relevante)

## Gestión de datos de tiempo {.title-top}

![](img/05c/lubridate1.png){.absolute top="70" left="1200" width="600"}

<br>

. . . 

> Convertir a formato Date o POSIX

. . . 

<br>

> Extraer componentes (día, año, mes, semana, nombre del día, etc)

. . . 

<br>

> Trabajar con lapsos de tiempo (intervalos, duraciones y períodos)

. . . 

<br>

> Operaciones y cálculos con variables de tiempo


## Definiciones {.title-top}


-   Un **date** es un día almacenado como el número de días desde el *01/01/1970* (si es anterior los números son negativos)

```{r}
#| echo: true
#| message: false
#| warning: false

library(tidyverse)
```


```{r}
#| echo: true

as_date(19881)
as_date(-1)
```


-   Un **datetime** es un punto en el tiempo, almacenado como el número de segundos desde el *01/01/1970 00:00:00 UTC*

```{r}
#| echo: true

as_datetime(1717718401)
```

## Paquete lubridate {.title-top}

::: columns
::: {.column width="50%"}
-   Convierte cadenas en fechas

```{r}
#| echo: true

dmy("07/06/2024")
dmy("07/06/2024") |> class()
dmy_h("07/06/2024 09")
```
:::

::: {.column width="50%"}
-   Extrae partes de una fecha

```{r}
#| echo: true

hoy <- dmy("07/06/2024")
hoy

# extraemos el año

year(hoy)

# extraemos la semana epidemiológica

epiweek(hoy)
```
:::
:::

## Lapsos de tiempo {.title-top}

![](img/05c/lubridate2.png){.absolute bottom="180" left="1300" width="500"}

::: {style="font-size: 0.9em;"}

Un año trópico dura 365 días 5 hs 48 min 45,10 s (365,242189 días), por lo que se produce un desfasaje con respecto a nuestro año calendario.

Para realizar operaciones con fechas y date-times sorteando estas dificultades, **lubridate** ofrece tres tipos de lapsos:

<br>

::: columns

::: {.column width="70%"}


-   **Intervalos**: lapso de tiempo que ocurre entre dos instantes específicos.



-   **Duraciones**: lapso de tiempo medidos en segundos exactos (máxima unidad temporal con una longitud consistente).



-   **Períodos**: intervalo de tiempo en unidades "humanas" mayores que segundos (minutos, días, meses, etc)

:::

::: {.column width="30%"}



:::

:::

:::

## Operaciones de tiempo {.title-top}

Calculo de tiempo entre dos fechas

<br>

::: columns
::: {.column width="52%"}
```{r}
#| echo: true

fecha1 <- dmy("26/05/1973")
fecha2 <- dmy("07/06/2024")

# creamos un intervalo entre las dos fechas
intervalo <- interval(start = fecha1, 
                      end = fecha2)
intervalo

# el intervalo puede ser divido por 
# duraciones que tienen unidades diferentes
# Las duraciones comienzan con d
# ejemplo: dyears()
```
:::

::: {.column width="48%"}
```{r}
#| echo: true

intervalo / dyears(1) # años

intervalo %/% dyears(1) # solo enteros

intervalo / ddays()

18640 / 365.25 # calculo de años
```
:::
:::

## Cadenas de caracteres (texto) {.title-top}

-   Para el lenguaje R, todo caracter que se encuentre entre comillas es una cadena de caracteres (en inglés llamada **“string”**).

-   Las cadenas de caracteres pueden contener letras (**“a”**), números (**“1”**) y símbolos (**“&”**) o una combinación de todos ellos.

Ejemplos de datos tipo cadena regular:

| Valores ejemplo | Descripción      |
|-----------------|------------------|
| B188            | Códigos CIE10    |
| C34.9           | Topografía CIE-O |
| 9061/6          | Morfología CIE-O |
| GAT-AAU-ATC-GAA | Secuencia ADN    |
| 7600XAD         | Códigos postales |

## Paquete stringr {.title-top}

![](img/05c/stringr.png){.absolute top="50" left="1500" width="200"}



<br> El paquete **stringr** se instala y activa cuando ejecutamos `library(tidyverse)`.

<br> 

-   Contiene una familia de funciones diseñadas para trabajar con cadenas de caracteres.

<br> 


-   Permite utilizar [expresiones regulares](https://es.wikipedia.org/wiki/Expresi%C3%B3n_regular) (**regex**).

<br> 


-   Sus funciones comienzan con el prefijo **str\_**

## Algunas de sus funciones comunes {.title-top}

<br>

. . . 

>  `str_lengtht()`: devuelve longitud de cadena

. . . 

>   `str_sub()`: extrae o reemplaza caracteres por posición

. . . 


>   `str_to_upper()`: convierte a mayúsculas

. . . 

>   `str_to_lower()`: convierte a minúsculas

. . . 

>   `str_trim()`: elimina espacios en blanco

. . . 

>   `str_pad()`: agrega espacios en blanco u otros caracteres

. . . 

>   `str_glue()`: une cadenas de caracteres


## Expresiones regulares {.title-top}

![](img/05c/expreg1.PNG){.absolute top="830" left="600" width="700"}

Una expresión regular es una cadena de texto especial para describir un patrón de búsqueda que se puede utilizar generalmente para:

::: {.fragment .fade-in-then-semi-out}

-   localizar cadenas de caracteres (ubicar - filtrar)

:::

::: {.fragment .fade-in-then-semi-out}

-   extraer una porción de los datos (extraer)

:::

::: {.fragment .fade-in-then-semi-out}

-   modificar los datos localizados (reemplazar)

:::

. . .

Una expresión regular habitualmente se construye concatenando la especificación de caracteres secuenciados.


## Operaciones y funciones que permiten expresiones regulares {.title-top}

![](img/05c/str_detect.png){.absolute top="700" left="500" width="700"}
-   Detectar patrones `str_detect()`: Devuelve vector lógico

-   Filtrar patrones `str_subset()`: Devuelve coincidencia en patrón

-   Extraer patrones `str_extract()`: Extrae coincidencias

-   Localizar patrones `str_locate()`: Localiza comienzo y final del patrón

-   Reemplazar patrones `str_replace()`: Reemplaza por otra cadena

## Expresiones regulares {.title-top}

::: {style="font-size: 0.8em;"}

| Símbolos y metacaracteres | Descripción                                                    |
|-----------------------------|-------------------------------------------|
| \^                        | Inicio de la cadena                                            |
| \$                        | Final de la cadena                                             |
| \[ \]                     | Cualquier carácter del conjunto entre paréntesis               |
| \[\^\]                    | Cualquier carácter no incluido en el conjunto                  |
| ?                         | Cero o una ocurrencia de lo que precede al símbolo             |
| \+                        | El caracter que le precede debe aparecer al menos una vez      |
| \*                        | El caracter que le precede debe aparecer cero, una o más veces |
| {x}                       | x ocurrencias del caracter que lo precede                      |
| {x,z}                     | Entre x y z ocurrencias del caracter que lo precede            |
| {x,}                      | x o más ocurrencias de lo que lo precede                       |

:::

## Expresiones regulares {.title-top}

::: {style="font-size: 0.8em;"}

| Símbolos y metacaracteres                               | Descripción                                           |
|---------------------------------------------------------|-------------------------------------------------------|
| \|                                                      | Une subexpresiones                                    |
| .                                                       | Concuerda con cualquier carácter individual           |
| ( )                                                     | Agrupa subexpresiones                                 |
| 0-9 a-z A-Z                                             | Rangos de números, letras…                            |
| \\                                                      | Marca el carácter siguiente como un carácter especial |
| \\.                                                     | Representa un punto dentro del patrón                 |
| \\s                                                     | Representa un espacio en blanco dentro del patrón     |
| \\n                                                     | Representa un salto de línea dentro del patrón        |
| \\d                                                     | Representa un dígito numérico dentro del patrón       | 
| \\w                                                     | Representa un carácter alfanumérico dentro del patrón |

:::

## Expresiones regulares {.title-top}

<br>

Algunos ejemplos sencillos:

<br>

**\^[ML]\[0-9\]\$**

Cadenas que comiencen con M o L y finalicen con algún número entre 0 y 9

**4{3}**

Cadenas que contengan tres números 4 repetidos continuos

**\^E\\\\d**

Cadenas que comiencen con E y continúen con un número cualquiera

**\[A-z\]\$**

Cadenas que finaliza con alguna letra mayúscula o minúscula

## Factores en R {.title-top}


-   Los factores son el formato de datos que el lenguaje R reserva para trabajar con **variables categóricas**, es decir, variables que tienen un conjunto fijo y conocido de valores posibles (*categorías cerradas*).

<br> 

-   Están compuesto por valores numéricos internos asociados a etiquetas que definen cada uno de los **niveles** (categorías de la variable).

<br> 

-   Son necesarios, por ejemplo, cuando necesitamos mostrar variables de caracteres en un **orden** específico (no alfabético).


## Paquete forcats {.title-top}

![](img/05c/forcats.PNG){.absolute top="50" left="1500" width="200"}

<br> <br> <br>

- El paquete forcats proporciona un conjunto de herramientas útiles que resuelven problemas comunes con factores en R.

<br> 

-   Respeta los principios del tidyverse

<br> 

-   Todas sus funciones comienzan con el prefijo **fct\_**

## Funciones mas relevantes {.title-top}

<br>

. . .

>   `fct_recode()`: recodifica niveles

. . .

>   `fct_relevel()`: reordena niveles

. . .

>   `fct_expand()`: agrega nuevos niveles

. . .

>   `fct_drop()`: elimina niveles no utilizados

. . .

>   `fct_rev()`: revierte orden de los niveles

. . .

>   `fct_unique()`: muestra valores únicos del factor

## Funciones mas relevantes {.title-top}

<br>

>   `fct_infreq()`: ordena niveles por frecuencia

. . .

>   `fct_explicit_na()`: explicita valores NA (agrega etiqueta al nivel)

. . .

>   `fct_other()`: unifica niveles concretos en "otros"

. . .

>   `fct_lump()`: unifica niveles menos frecuentes absolutos en "otros"

. . .

>   `fct_lump_prop()`: unifica niveles menos frecuentes porcentuales en "otros"


## Manejo de NA's con naniar {.title-top}

![](img/05c/naniar_logo.png){.absolute top="20" left="1500" width="200"}

<br>
<br>
<br>


El paquete **naniar** es otro paquete que reúne funciones para el manejo de valores faltantes (NA en R).

<br>

-   Proporciona funciones analíticas y visuales de detección y gestión

-   Es compatible con el mundo *"tidy"* de tidyverse

-   Posibilita el trabajo de imputación (no lo trataremos en el curso)

## Paquete naniar {.title-top}

![](img/05c/naniar.png){.absolute top="700" left="600" width="750"}


De las muchas funciones que tiene el paquete seleccionamos algunas para mostrar que son muy útiles para nuestra tarea habitual.

`miss_var_summary()`: proporciona un resumen sobre los valores NA en cada variable del dataframe

`gg_miss_upset()`: genera un gráfico Upset sobre los valores NA de dataframe

`replace_with_na()`: reemplaza valores específicos con valores NA

`replace_na_with()`: reemplaza valores NA con valores específicos

## Ejemplo de un UpSet de valores perdidos 

<br>

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: center
#| fig-height: 8
#| fig-width: 15


datos <- readxl::read_excel("datos/base2023r.xlsx")
library(naniar)

gg_miss_upset(datos, nsets = 15)
```

## Documentación{.invert}

<br>

![](img/03/r4ds2.png){fig-align="center"}

::: {.centered}

Capítulos 14, 15, 16 y 17 del libro ["R for Data Science (2e) - Data tidy"](https://r4ds.hadley.nz) 

:::