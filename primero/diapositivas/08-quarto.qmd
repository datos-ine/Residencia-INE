---
pagetitle: "Bienvenidxs a Quarto"
format: 
  revealjs:
    self-contained: true
    width: 1920
    height: 1080
    slide-number: true
    transition: fade
    theme: [simple, img/custom.scss]
    logo: img/INE.gif
    footer: "Instituto Nacional de Epidemiología"
---

```{r setup, include=F}
#| label: setup
#| include: false


library(quarto)
library(fontawesome)
library(tidyverse)
```

##  {#hola-quarto-title data-menu-title="Bienvenidxs a Quarto" background-image="img/08/bienvenidxs2.png" aria-label="Un cometa de Quarto" visibility="uncounted"}


[basado en tom mock, mine centikaya<br>y elaboración propia. artwork por allison horst]{.custom-artwork}


## Qué es Quarto®? {.title-top}

<br>

> **Quarto® es un nuevo sistema de publicación científica y técnica de código abierto construido sobre [Pandoc](https://pandoc.org/)** [^1]

[^1]: conversor de documentos libre y de código abierto, mayormente usado como una herramienta de escritura (especialmente por académicos) ver en [Wikipedia](https://es.wikipedia.org/wiki/Pandoc)

. . .

> Mezcla texto narrativo y código para producir resultados con un formato elegante en documentos, tableros interactivos, páginas web, publicaciones de blogs, libros y más.

. . .

> Es independiente del lenguaje R (incluso trabaja con otros lenguajes como Python y Julia).

## Comunicar como parte de programar {.title-top}

<br>

![](img/08/Captura1.PNG){fig-align="center"}

## Ecosistema de RMarkdown {.title-top .nostretch}

<br>


::: {.fragment .fade-up}
![](img/08/Captura5.PNG){fig-align="center" fig-width=100%}
:::


## RMarkdown en Rstudio {.title-top}

-   Desarrollo del paquete **knitr** desde 2011
-   Desarrollo de **RMarkdown** desde 2014 (rmarkdown + pandoc)
- 10 años de experiencia en `knitr` + `rmarkdown` se volcaron al desarrollo de Quarto.

![](img/08/Captura2.PNG){.absolute top="570" left="150" width="1100"}

## Como funciona Quarto? {.title-top .centrado}

![](img/08/Captura6.PNG){.absolute top="200" left="150" width="1600"}

## Como funciona Quarto? {.title-top .centrado}

::: {.fragment .fade-in-then-semi-out}

Quarto usa `knitr` o `jupyter` como motor para ejecutar código y generar una salida temporal (**.md**).

:::

::: {.fragment .fade-in-then-semi-out}

El archivo temporal se procesa mediante los filtros **Lua** de `Pandoc` y `Quarto` + `Bootstrap CSS` para **HTML** o `LaTeX` para **PDF** y se convierte a un formato de salida final.
:::

::: {.fragment .fade-in-then-semi-out}

Los filtros Lua escritos por desarrolladores de `R`/`Python`/`Julia` son intercambiables entre formatos.

:::

::: {.fragment .fade-in-then-semi-out}

Quarto además incluye soporte nativo para `Observable JS`, un conjunto de mejoras a JavaScript básico creado por *Mike Bostock* (también autor de `D3`).

:::

::: {.fragment .fade-in-then-semi-out}

Observable JS se distingue por su tiempo de ejecución reactivo, que es 
especialmente adecuado para la exploración y el análisis de datos interactivos.

:::

## Ejemplo interactivo con Observable JS {.title-top}

<br>

Conversor de temperatura de ℃ a ℉

<br>

```{ojs}
viewof temp = Inputs.range([0, 99], {step: 1, value: 0, label: htl.html`Temp. &#x2103;`})
```

Celsius = \${d3.format(".0f")(temp)}℃ y Fahrenheit = \${d3.format(".1f")(temp \* 9/5 + 32)}℉.

. . . 

<br>
````code
```{{ojs}}
viewof temp = Inputs.range([0, 99], {step: 1, value: 0, label: htl.html`Temp. &#x2103;`})
```
Celsius = \${d3.format(".0f")(temp)}℃ y Fahrenheit = \${d3.format(".1f")(temp \* 9/5 + 32)}℉.

````


## Entonces, ¿qué es Quarto? {.title-top}

> Quarto es una interfaz de *línea de comandos* (**CLI**) que representa formatos de texto sin formato (**.qmd**, .rmd, .md) o formatos mixtos (**.ipynb**/Jupyter notebook) en informes estáticos *PDF*/*Word*/*HTML*, *libros*, *sitios web*, *presentaciones* y más.

```{py}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|4|10"
cballejo$ quarto --help

  Usage:   quarto
  Version: 1.6.39

  Description:
    Quarto CLI

  Options:
    -h, --help     - Show this help.                            
    -V, --version  - Show the version number for this program.  

  Commands:
    render          [input] [args...]   - Render input file(s) to various document types.            
    preview         [file] [args...]    - Render and preview a document or website project.          
    serve           [input]             - Serve a Shiny interactive document.                        
    create-project  [dir]               - Create a project for rendering multiple documents          
    convert         <input>             - Convert documents to alternate representations.            
    pandoc          [args...]           - Run the version of Pandoc embedded within Quarto.          
    run             [script] [args...]  - Run a TypeScript, R, Python, or Lua script.                
    install         <type> [target]     - Installs an extension or global dependency.                
    publish         [provider] [path]   - Publish a document or project. Available providers include:
    check           [target]            - Verify correct functioning of Quarto installation.         
    help            [command]           - Show this help or the help of a sub-command.    
```

## Software Quarto {.title-top .centrado}

<br>

-   El sitio web de `Quarto` es <https://quarto.org/>

-   La **versión actual** es 1.6.39 (Windows) del 27/11/2024

-   La **guía oficial** se puede encontrar en <https://quarto.org/docs/guide/>

-   **RStudio Desktop** incluye una versión de Quarto en su instalación desde la versión 2022.07.01 pero conviene actualizarlo de forma independiente

![](img/08/Captura7.PNG){.absolute top="650" left="620" width="550"}


## Otras características {.title-top}

::: {.fragment .fade-in-then-semi-out}

- Tiene múltiples formatos modernos de salidas unificado la funcionalidad de muchos paquetes del ecosistema R Markdown (rmarkdown, bookdown, distill, xaringan, etc.)

:::

::: {.fragment .fade-in-then-semi-out}

- Implementa funciones más atractivas y útiles en todos los productos: pestañas, resaltado de sintaxis, diagramas, etc.

:::

::: {.fragment .fade-in-then-semi-out}

- Se pueden renderizar los documentos viejos `.rmd` (RMarkdown) o `.ipynb` (cuadernos jupyter de python) con Quarto.

:::

::: {.fragment .fade-in-then-semi-out}


- Viene incluido en otros editores como VS Code

:::

::: {.fragment .fade-in-then-semi-out}

- Soporta `htmlwidgets` en R y Jupyter widgets para Python/Julia además de Observable JS

:::

## Por qué usar Quarto en lugar de RMarkdown? {.title-top}

. . . 

- Quarto no es muy diferente a **RMarkdown**, más bien es un RMarkdown de nueva generación (*next-generation*)

. . .

- Posee mejor accesibilidad y funciones más completas listas para usar

. . .

- **RMarkdown** aún tiene soporte pero todas las novedades y mejoras se están desarrollando solo para `Quarto`

. . .

- Si en el futuro incorporas algún otro lenguaje de programación/análisis podes seguir utilizandolo

. . .

- Podes elegir otros editores y `Quarto` seguirá funcionando


## El universo de Quarto es enorme {.title-top transition="zoom"}

![](img/08/Captura4.PNG){.absolute top="200" left="140" width="1650"}


## Anatomia de un `.qmd` {.title-top .smaller}

. . .

Al igual que los **.Rmd** de **RMarkdown** el archivo fuente de `Quarto` es de texto plano

. . .

Tiene una cabecera `YAML` con metadatos 


:::: {.columns style="font-size: 50px;"}

::: {.column width="45%"}

``` yaml
format: html
engine: knitr
```

:::

::: {.column width="55%"}

``` yaml
format: html
engine: jupyter
```

:::

::::

. . . 

Suele tener código incluido



:::: {.columns style="font-size: 50px;"}

::: {.column width="45%"}

````code
```{{r}}
library(dplyr)
mtcars |> 
  group_by(cyl) |> 
  summarize(mean = mean(mpg))
```
````

:::

::: {.column width="55%"}

````code
```{{python}}
from siuba import *
(mtcars
  >> group_by(_.cyl)
  >> summarize(avg_mpg = _.mpg.mean()))
```
````

:::

::::

. . .

Y texto narrativo

::: {style="font-size: 50px;"}
``` markdown
# Cabecera 1
Esto es texto en **negrita**, esto en *itálica* y esta otra una 
![imagen](image.png){fig-alt="Texto alternativo para esta imagen"}.
```

:::

## Ejemplo de un .qmd {.title-top}

Los archivos `.qmd` responden estructuralmente al modelo de programación literaria ([Literate programming](https://es.wikipedia.org/wiki/Programaci%C3%B3n_literaria))

<br>

    ---
    title: "ggplot2"
    date: "18/04/2024"
    format: html
    ---

    ## Calidad del aire

    Esta es la relación entre la temperatura y el nivel de ozono.

    ```{{r}}
    #| label: fig-calidad_aire
    library(ggplot2)
    ggplot(airquality, aes(Temp, Ozone)) + 
      geom_point() + 
      geom_smooth(method = "loess"
    )
    ```


## Metadatos: YAML {.title-top}

. . . 

<br>

- Los metadatos que se definen en el encabezado YAML que todos los archivos `.qmd` tienen son procesados en muchas etapas del renderizado y puede influir en el documento final de varias formas. 

. . . 

- Siempre se colocan al principio del documento y lo lee **Pandoc**, **Quarto** y **knitr**. 

. . . 

- En su recorrido, la información que contiene suele afectar el código, el contenido y el proceso de renderizado.

. . . 

- Muchas de las opciones de código YAML para Quarto se pueden encontrar en su [documentación](https://quarto.org/docs/reference/)  

## Texto y otros elementos {.title-top}

. . . 

<br>

- `Quarto` se basa en **Pandoc** y utiliza su variación de [Markdown](https://es.wikipedia.org/wiki/Markdown) como sintaxis para documentos. 

. . . 

- El **Markdown** de Pandoc es una versión ampliada y ligeramente revisada de la sintaxis Markdown de [John Gruber](https://en.wikipedia.org/wiki/John_Gruber).

. . . 

- Markdown es un lenguaje de marcas sencillo diseñado para ser fácil de escribir y, lo que es más importante, fácil de leer.

. . . 

- Es el mismo que se utiliza en el formato anterior de RMarkdown (archivos .Rmd)

## Código {.title-top}

. . . 

- El código se puede insertar a través de chunks (fragmentos) en distintos lenguajes

````code
```{{r}}
#| Aquí van los metadatos con las opciones de ejecución

Aquí va el código
```
````
. . . 

- Las opciones de ejecución del código incluido dentro de estos fragmentos se realiza mediante metadatos con el formato #|

. . . 

- Se pueden definir opciones de salida, figura, procesado, etc. Ver [guía](https://quarto.org/docs/computations/execution-options.html).

. . . 

- También se puede incluir [código en línea](https://quarto.org/docs/computations/inline-code.html) en el texto. 

```{r}
#| echo: false

radio <- 5
```


````code
```{{r}}
radio <- 5
```
````
(El radio del circulo es \`\{r\} radio\`). El radio del circulo es `{r} radio`

## Algunos ejemplos para visualizar {.title-top}

::: columns
::: {.column width="50%"}

<br>

- [HTML paginado -estilo Tufte-](https://quarto-dev.github.io/quarto-gallery/page-layout/tufte.html)

- [Presentación revealjs](https://apreshill.github.io/palmerpenguins-useR-2022/)

- [Libro web](https://r4csr.org/)

- [Sitio web](https://sta210-s22.github.io/website/)

- [Documentos interactivos -shiny-](https://jjallaire.shinyapps.io/diamonds-explorer/)

- [Tableros](https://mine-cetinkaya-rundel.github.io/ld-dashboard/)

:::

::: {.column width="50%"}

<br>

![](img/08/Captura9.PNG){width="80%"}

:::

:::

## {#chau-quarto-title data-menu-title="Hasta la proxima"  background-image="img/08/Captura8.png" aria-label="Dos pinguinos mirando la luna de Quarto"}