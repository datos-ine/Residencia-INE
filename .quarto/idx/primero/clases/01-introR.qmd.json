{"title":"**Introducción al lenguaje R**","markdown":{"yaml":{"title":"**Introducción al lenguaje R**","format":{"html":{"page-layout":"full","toc":true,"toc-title":"Contenidos","toc-location":"left","toc_float":true,"toc_collapsed":false,"toc_depth":4,"include-in-header":[{"text":"<link rel=\"icon\" type=\"image/x-icon\" href=\"img/favicon.ico\">\n"}]}},"number_sections":true,"anchor_sections":true},"headingText":"Qué es el lenguaje R?","containsRefs":false,"markdown":"\n\n\n```{r, message=FALSE, echo=F}\nknitr::opts_chunk$set(comment=NA, dpi = 300)\n```\n\n\n\nEl sitio oficial [r-project.org](https://www.r-project.org/) dice que *\"R es un entorno de software libre para gráficos y computación estadística. Se compila y se ejecuta en una amplia variedad de plataformas UNIX, Windows y MacOS.”.* \n\nProfundizando en su descripción podemos decir, técnicamente, que es un __*lenguaje de programación interpretado, orientado a objetos, multiplataforma y open source aplicado al manejo de datos estadísticos.*__\n\nA continuación detallamos cada parte de la definición:\n\n**R es un lenguaje de programación estadístico**\n\nR es un lenguaje de programación, con sus estructuras y reglas de sintaxis, que posee una gran variedad de funciones desarrolladas con fines estadísticos.\n\n**R es un lenguaje Orientado a Objetos**\n\nImplementa conceptos de la programación orientada a objetos y esto\nle permite ser simple y flexible en el manejo de datos. En R\ntodo con lo que trabajamos es considerado un \"objeto\": las variables, funciones, datos, resultados, etc. que pueden ser modificados por otros objetos.\n\n**R es un lenguaje interpretado**\n\nNo es necesario compilar los scripts de programación para construir\nejecutables sino que directamente se ejecutan por medio del intérprete que  devuelve resultados de forma inmediata.\n\n**R es multiplataforma (corre en Linux, Windows y Mac)**\n\nFunciona en diferentes sistemas operativos como Linux, Windows y Mac. \n\n**R es Open Source y se distribuye bajo licencia GNU - GPL**\n\nEsto quiere decir que se distribuye gratuitamente bajo licencia GNU\n(General Public License) -- GPL y que los usuarios tienen la libertad de\nusar, estudiar, compartir (copiar) y modificar el software.\n\n## Breve historia \n\nR fue desarrollado a partir del lenguaje S que tiene sus orígenes en Bell Labs de la AT&T (actualmente Lucent Technologies) de mediados de la década del '70. Posteriormente, S fue vendido y dio origen a una versión propietaria denominada S-Plus que es comercializada por Insighful Corporation.\n\nEn 1995 dos profesores de estadística de la Universidad de Auckland, en\nNueva Zelanda [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka) y [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)), iniciaron el [\"Proyecto\nR\"](https://en.wikipedia.org/wiki/R_(programming_language)), con la intención de desarrollar un programa estadístico inspirado en el lenguaje S pero de dominio público.\n\nAunque se dice que R es un dialecto de S existen diferencias importantes\nen el diseño de ambos lenguajes.\n\nEl software está desarrollado en lenguaje C++ con algunas rutinas\nagregadas en Fortran) y su nombre se debe a la letra con la que inician\nlos nombres de pila de sus autores (Ross y Robert).\n\nActualmente es mantenido por un grupo internacional de desarrolladores\nvoluntarios denominado [Core Development Team](https://www.r-project.org/contributors.html).\n\n## Scripts\n\nUn script es un archivo de texto plano con una lista secuencial de\nfunciones y comandos del lenguaje R para ser ejecutado por el intérprete\nde R.\n\nScript se puede traducir como guión, archivo de órdenes, archivo de\nprocesamiento por lotes o archivo de sintaxis.\n\nGeneralmente se crea en editores especiales y/o en cualquier procesador básico de texto plano. Se almacena en un archivo que puede ser leído,\nmodificado, guardado y se puede ejecutar completo o línea a línea.\n\nPoseen una cualidad muy provechosa: son re-utilizables, adaptándolos a\notras necesidades.\n\n**Documentación de los scripts de R:**\n\nLa documentación es una tarea de mucha importancia en cualquier lenguaje\nde programación, ya que nos permite entender que estamos haciendo en el\nscript. Además nos sirve para el futuro mantenimiento o para la\nreutilización del código elaborado, tanto para otros usuarios como para\nnosotros mismos.\n\nLa forma de documentar los scripts de código en R es utilizando\ncomentarios. Toda línea que comienza con el símbolo `#` es entendido por\nel interprete como un comentario y los caracteres que sigan a ese\nsímbolo no seran tenidos en cuenta cuando se ejecute ese código.\n\n```{r}\n# esto es una línea de comentario y no es tenida en cuenta por el intérprete\n```\n\nAsí que a la hora de documentar es preferible abusar de estos\ncomentarios que no utilizarlos.\n\n## Funciones\n\nLos comandos u órdenes elementales de R se denominan **funciones**. A algunas se las llama \"integradas\" porque están incluidas en el núcleo (R base) y sus nombres están reservados.\n\nTambien podemos utilizar otras pertenecientes a librerías (paquetes) que se pueden instalar y activar.\n\nToda función tiene un nombre y normalmente recibe argumentos o\nparámetros que deben ser escritos **entre paréntesis y separados por comas**. Incluso algunas de ellas que no tienen asociado ningún argumento necesitan finalizar con paréntesis `()` para ser entendidas como funciones.\n\nSiempre una función devuelve un resultado, un valor o realiza una\nacción.\n\n```{r,echo=F,  fig.align='center', out.width = \"50%\"}\nknitr::include_graphics(\"img/01/funciones.JPG\")\n```\n\nComo el interprete de R no permite errores en la sintaxis de las expresiones, debemos atender a los siguientes puntos a la hora de escribirlas:\n\n-   La sintaxis habitual de una función y sus argumentos es la siguiente:\n\n```{r, eval=F}\nfuncion(arg1, arg2, arg3,...)\n```\n\n-   Los títulos de los argumentos pueden escribirse y mediante un igual\n    agregar el valor correspondiente. También se puede omitir el título\n    del argumento y escribir directamente el valor, pero en este caso,\n    hay que respetar el orden definido por la función.\n\n```{r, eval=F}\nfuncion(arg1=32, arg2=5, arg3=65,...)\n```\n\nes igual a hacer:\n\n```{r, eval=F}\nfuncion(32, 5, 65,...)\n```\n\nsiempre que se respete el mismo orden.\n\n-   Con los argumentos se deben cumplir las mismas reglas que en todo el\n    lenguaje. Los valores numéricos, lógicos, especiales y objetos van\n    escritos en forma directa y cuando escribimos caracteres (texto) van\n    necesariamente encerrados entre comillas.\n\n```{r, eval=F}\nfuncion(arg1=3, arg2=NA, arg3=TRUE, arg4=\"less\", arg5=x,...)\n```\n\n## Librerías (paquetes)\n\nLas librerías son grupos de funciones empaquetados que se pueden\ninstalar y utilizar en el análisis de datos. Habitualmente se agrupan\npor tema o similitud de funciones.\n\nEstos paquetes se pueden descargar directamente del repositorio oficial\nde CRAN en Internet (similar al uso de los repositorios de Linux) o bien\ndescargar en formato .zip para luego instalar y usar.\n\nSe pueden activar y desactivar en cualquier momento del análisis.\n\nAlgunos poseen dependencias de otros paquetes que serán necesarios para\nque funcione.\n\n## Sintaxis, errores y advertencias\n\nEl lenguaje es muy preciso en su sintaxis y equivocarse en la forma de escribir una función o cualquier otro objeto produce respuestas de error del interprete de R que es habitual cuando iniciamos el aprendizaje.\n\nLa exactitud en la escritura de comandos y funciones incluye la\ndistinción entre mayúsculas y minúsculas. Es decir, que no es lo mismo una 'a' que una 'A'.\n\nExisten tres grupos de mensajes de error:\n\n- error de sintaxis\n- error de objeto no encontrado\n- otros errores\n\nSe dice que hay un error de sintaxis, cuando ejecutamos una línea de código que el motor de R no puede interpretar debido a que algo está mal escrito.\n\nHabitualmente los errores de sintaxis se deben a que falta o sobra algún elemento necesario en la estructura de una función (comas, parentesis, llaves, corchetes, comillas, etc.)\n\nPor ejemplo la función `rep()` repite valores una cantidad de veces. Tiene dos argumentos, `x` donde se coloca el valor a repetir y `times` donde se define la cantidad de veces.\n\n\n```{r}\nrep(x = 3, times = 4) #repetimos 4 veces 3 con rep()\n```\n\nSi nos olvidamos de cerrar el paréntesis...\n\n```{r, eval=FALSE}\nrep(x = 3, times = 4\n    \nError: Incomplete expression: rep(x = 3, times = 4\n```\nSi nos olvidamos de separar los argumentos con la coma\n\n```{r, eval=FALSE}\nrep(x = 3 times = 4)\n\nError: unexpected symbol in \"rep(x =3 times\"\n```\nSi en lugar de escribir x como primer argumento y escribimos otra letra...\n\n\n```{r, eval=FALSE}\nrep(y =3, times = 4)\n\nError in rep(y = 3, times = 4) : \n  attempt to replicate an object of type 'symbol'\n```\nSi escribimos mal la función...\n\n```{r, eval=FALSE}\nREP(x =3, times = 4)\n\nError in REP(x = 3, times = 4) : no se pudo encontrar la función \"rop\"\n```\nEsta última posibilidad es similar a un \"objeto no encontrado\" por **error de sintaxis**.\n\nLos mensajes de error en general y sobre todo al principio pueden parecer extraños y difíciles de entender, pero con un poco de práctica podemos inferir donde está el problema.\n\nLos errores de **objetos no encontrados** pueden tener una de varias causas:\n\n- el nombre no se escribió correctamente (p.ej.: sintaxis, mayúsculas / minúsculas)\n- el paquete o archivo que contiene el objeto no ha sido cargado\n- olvidamos poner comillas en un lugar que corresponde \n- otros motivos posibles\n\nVolvamos al ejemplo anterior, ahora repitiendo un valor tipo character\n\n```{r}\nrep(x = \"A\", times = 4) #repetimos 4 veces 3 con rep()\n```\nSi olvidamos las comillas...\n\n```{r, eval=FALSE}\nrep(x = A, times = 4) #repetimos 4 veces 3 con rep()\n\nError: objeto 'A' no encontrado\n```\n\n**Advertencias**\n\nUna advertencia no es algo tan serio, como un error, o al menos no lo parece, ya que esta permite que la función se ejecute igual. Pero puede ocurrir que ignorar una advertencia llegue a ser algo muy serio, si esto implica que la salida de la función es equivocada.\n\nPor lo tanto, es una buena política entender los mensajes de advertencia para ver si indican problemas para preocuparnos o no.\n\nResumiendo:\n\n```{r,echo=F,  fig.align='center', out.width = \"60%\"}\nknitr::include_graphics(\"img/01/errores_advertencias.PNG\")\n```\n\n\n## Creación de objetos \n\nTodas las declaraciones donde se crean objetos, tienen este símbolo de asignación `<-`. \n\n```{r, eval=F}\nnombre_objeto <- valor\n```\n\nVeámoslo en un ejemplo:\n\n```{r}\na <- 1\n```\n\nEn este caso asignamos el valor 1 al objeto `a`. El objeto `a` es un vector de una posición (un solo valor).\n\nSi llamasemos al objeto `a`, el interprete nos devuelve el valor\nasignado previamente.\n\n```{r}\na\n```\n\nObservemos que además de devolvernos el valor aparece delante un 1 entre corchetes `[1]`.Este número es la ubicación o índice del comienzo del objeto, que en este caso tiene una sola posición. \n\n## Estructuras de datos\n\nLos objetos *contenedores de datos* más simples pertenecen a **cinco\nclases** que se denominan *atómicas* y que son los siguientes tipos de\ndatos:\n\n-   integer (números enteros)\n-   numeric / double (números reales)\n-   complex (números complejos)\n-   chacacter (cadena de caracteres)\n-   logical (lógicos o booleanos -- toman valores por si o no)\n\n```{r,echo=F,  fig.align='center', out.width = \"80%\"}\nknitr::include_graphics(\"img/01/tipo_datos.JPG\")\n```\n\n\nSin embargo, cada una de estas clases de datos no se encuentran de\nmanera aislada, sino encapsulados dentro de la clase de objeto\noperacional más básica del lenguaje a la que se denomina **vector**.\n\n**Vector**\n\nUn vector es un conjunto de valores (números o símbolos), todos del\nmismo tipo ordenados de la forma (elemento 1, elemento 2, ... , elemento\n$n$) y $n$ es la longitud o tamaño del vector.\n\nSurge de la definición dos términos importantes: el tipo y la longitud.\n\nTodos los objetos de datos tienen estos dos atributos intrínsecos.\n\n-   el tipo, que puede ser integer, numeric, chacacter, complex y\n    logical\n-   la longitud, que es el número de elementos que contiene el objeto.\n\nEl vector más simple es el que contiene un dato, podría ser numérico de\nun solo dígito. El tipo sería numeric y la longitud 1.\n\n```{r}\nvec1 <- 1\nvec1\n```\n\nOtro vector más grande por ejemplo podría ser (1,5,2). En este caso\ntambién es del tipo numeric pero tiene una longitud de 3 elementos (3\nposiciones que integran el vector).\n\n```{r}\nvec2 <- c(1,5,2)\nvec2\n```\n\nComo vemos, para concatenar estos tres valores numéricos usamos la forma\n`c()`. Esta `c` es una función de R, justamente para concatenar. (todo\nlo que aparece siempre antes de paréntesis es una función). Dentro de la\nfunción los valores van separados por comas.\n\nAquí podemos señalar otra característica, según la definición de vector,\nla colección de elementos se encuentra ordenada, por lo que en nuestro\nejemplo la primera posición la ocupa el 1, la segunda el 5 y la tercera\nel 2. Como el orden importa, si tuviese otro vector (5,1,2), a pesar de\ntener los mismos elementos no sería el mismo vector porque están\nordenados de forma diferente.\n\nPara ver la longitud del vector usamos:\n\n```{r}\nlength(vec2)\n```\n\nNos informa que `vec2` tiene 3 elementos.\n\nAsimismo podemos ver que los datos almacenados en este segundo ejemplo\ncumplen con la definición en lo que respecta al tipo de dato, ya que\ncada elemento es del mismo tipo (numeric).\n\nPara conocer la clase del dato ejecutamos:\n\n```{r}\nclass(vec2)\n```\n\nVeamos un ejemplo de asignación de otro tipo de dato atómico, como es el\ncharacter:\n\n```{r}\nvec3 <- \"Hola\"\nvec3\n```\n\nSiempre que escribamos contenido de tipo caracter debemos hacerlo entre\ncomillas. En este caso generamos el vector `vec3` con el contenido\n\"Hola\". A pesar de ser una palabra que, por supuesto, esta compuesta de\nvarios caracteres, dentro del vector `vec3` esta ocupa una sola\nposición.\n\n```{r}\nlength(vec3)\n```\n\nRespecto a la clase del dato si usamos la función `class()` tendremos:\n\n```{r}\nclass(vec3)\n```\n\n**Dataframe**\n\nUn dataframe es un objeto cuya finalidad es contener conjuntos de datos.\nSe asemeja a una tabla que tiene filas y columnas (dos\ndimensiones), donde cada columna puede almacenar\nelementos de diferentes tipos.\n\nAdemás las columnas suelen tener nombres únicos y podemos referenciarlas\npor estos nombres, como si fueran variables del conjunto de datos.\n\nEs el tipo de objeto que utilizamos para almacenar información leída de\ntablas de datos provenientes de archivos externos (formato texto\nseparado por comas, Excel, etc) y con las cuales acostumbramos a\ntrabajar en el análisis.\n\nDesde el punto de vista de su estructura, todo dataframe esta conformado\npor una serie de vectores de la misma longitud ubicados verticalmente\nuno al lado de otro.\n\nPodemos verlo en la siguiente porción de código:\n\n```{r}\nHC <- c(\"F324\", \"G21\", \"G34\", \"F231\")\nedad <- c(34,32,34,54)\nsexo <- c(\"M\", \"H\", \"H\", \"M\")\n\ndf1 <- data.frame(HC, edad, sexo)\n\ndf1\n```\n\nCreamos tres vectores con datos de supuestos individuos, su historia\nclinica, la edad y el sexo. Luego mediante la función `data.frame()`\n\"unimos\" esos vectores en forma vertical para formar un dataframe de 3\nvariables y 4 observaciones.\n\nExisten otras estructuras de datos que aparecen en la siguiente figura. Las más habituales en nuestro trabajo son los vectores y los dataframes.\n\n```{r,echo=F,  fig.align='center', out.width = \"55%\"}\nknitr::include_graphics(\"img/01/objetos_R.png\")\n```\n\n\n## Operadores en R\n\nAdemás de funciones, el lenguaje R cuenta con operadores similares a otros lenguajes de programación, que permiten realizar operaciones con datos.\n\n### R como calculadora\n\nEl lenguaje R cuenta con operadores aritméticos de uso relativamente intuitivo, que permiten realizar operaciones matemáticas como si usasemos una calculadora.\n\n\n```{r,echo=F,  fig.align='center', out.width = \"45%\"}\nknitr::include_graphics(\"img/01/op_aritmeticos.JPG\")\n```\n\n```{r}\n# suma\n2 + 5\n\n# resta\n3 - 2\n\n# multiplicación\n9 * 3\n\n# división\n10 / 2\n\n# potenciación\n5 ^ 2\n```\n\n**Nota**: observarán que el interprete del lenguaje al devolvernos un valor en consola lo muestra con una notación inicial de un 1 encerrado entre corchetes `[1]`.\nEste número es el índice del vector que nos está mostrando R y que siempre comienza con 1. Si la cantidad de elementos de un vector mostrados por la consola superase el ancho de la pantalla, entonces el listado seguiría debajo y al comienzo de la nueva línea veríamos otro número entre corchetes que sería el indice de ese primer valor. Veamos un ejemplo:\n\n```{r, echo=F}\nseq(from=0.1, to=0.9,by = 0.01)\n\n\n```\nEl 0.25 que es primer valor de la segunda fila esta en la posición 16 de ese vector de números. Y, por ejemplo, el 0.70 en la posición 61.\n\nPara otras operaciones matemáticas como la raíz cuadrada o el valor absoluto de un múmero, existen funciones específicas incluídas en R base.\n\n```{r}\n# radicación (raíz cuadrada)\nsqrt(9)\n\n# valor absoluto\nabs(-3)\n```\n\nTambién se pueden hacer operaciones con los objetos que almacenan a estos valores numéricos asignados:\n\n```{r}\n# a contiene el valor 3\na <- 3\n\n# b contiene el valor 6\nb <- 6\n\n# aplicamos una fórmula determinada\n(a + b) * b\n```\n\nY funciona con objetos como los vectores que contienen más de un elemento, aplicando **artimética vectorial**, donde las operaciones se realizan elemento a elemento.\n\n```{r}\n# creamos el vector a con 3 elementos\na <- c(1, 2, 3)\n\n# ejecutamos una operación matemática a todos los elementos de a\na * 3\n```\n\nO bien, con operaciones entre objetos, donde se las operaciones se realizan entre los elementos de la misma posición:\n\n```{r}\n# creamos el vector a con 3 elementos\na <- c(1, 2, 3)\n\n# ejecutamos una operación matemática a todos los elementos de a * a\na * a\n```\n\nMediante `sum()` se puede hacer sumatorias de elementos en  vectores numéricos.\n\n```{r}\n# creamos el vector a con 3 elementos\na <- c(1, 2, 3)\n\n# realizamos una sumatoria de todos los elementos de a\nsum(a)\n```\n\nOtra función muy utilizada es la que permite que redondeemos valores con decimales.\n\n```{r}\n## redondeamos definiendo 2 digitos decimales\n\nround(23.76859, digits = 2)\n```\n\n\n## Concatenación y secuencias regulares\n\nYa usamos la función `c()` para concatenar elementos. Habitualmente cuando  deseemos crear vectores con más de un elemento vamos a recurrir a esta función.\n\n```{r}\n# vector numérico de 4 elementos\nc(6, 3, 6, 8)\n\n# vector caracter de 2 elementos\nc(\"Hola\", \"Chau\")\n\n```\n\nExiste otra forma de concatenar elementos a partir de un operador de rango.\nProduce un intervalo secuencial de enteros que puede ser ascendente o descendente.\nEl operador es `:` y se usa de la siguiente forma:\n\n```{r}\n# ascendente\n1:10\n\n# descendente\n10:1\n```\n\nOtra manera es por medio de la función `seq()` que tiene como argumentos principales *from*, *to* y *by*\n\n```{r}\n# secuencia de 1 a 20 cada 2\nseq(from = 1, to = 20, by = 2)\n```\n\nAlgunos otros ejemplos de la misma función pueden ser:\n\n```{r}\n# secuencia de 0.1 a 0.9 cada 0.1\nseq(from = 0.1, to = 0.9, by = 0.1)\n\n# secuencia de -5 a 5 cada 1\nseq(from = -5, to = 5, by = 1)\n\n# secuencis de 300 a 0 cada 50 (se escribe -50 porque es descendente)\nseq(from = 300, to = 0, by = -50)\n```\n\nFinalmente la última posibilidad que vamos a mostrar es la función `rep()` que repite valores. Su forma más sencilla es `rep(x, times = Nº)` que coloca un Nº de repeticiones de x, una tras otra.\n\nAlgunos ejemplos de la función:\n\n```{r}\n# repetimos 5 veces el número 2\nrep(x = 2, times = 5)\n\n# combinada con el operador de rango\nrep(1:4, 5)  \n\n# combinada con la función de concatenación\nrep(c(4.5,6.8,7.2), 2) \n```\n\n\nTambién existen **operadores relacionales** y **conectores lógicos** que vamos a ver más adelante, cuando por ejemplo, necesitemos construir condiciones para filtrar subconjuntos de datos.\n\n## Valores especiales en R\n\nExisten algunos valores especiales para datos con expresiones reservadas\nen R, entre ellos encontramos los valores NA, NaN, Inf y NULL.\n\n```{r,echo=F,  fig.align='center', out.width = \"60%\"}\nknitr::include_graphics(\"img/01/valores_esp.JPG\")\n```\n\n\nEl más relevante de estos valores especiales es el NA que sirve para\nindicar la inexistencia de valor.\n","srcMarkdownNoYaml":"\n\n\n```{r, message=FALSE, echo=F}\nknitr::opts_chunk$set(comment=NA, dpi = 300)\n```\n\n\n## Qué es el lenguaje R?\n\nEl sitio oficial [r-project.org](https://www.r-project.org/) dice que *\"R es un entorno de software libre para gráficos y computación estadística. Se compila y se ejecuta en una amplia variedad de plataformas UNIX, Windows y MacOS.”.* \n\nProfundizando en su descripción podemos decir, técnicamente, que es un __*lenguaje de programación interpretado, orientado a objetos, multiplataforma y open source aplicado al manejo de datos estadísticos.*__\n\nA continuación detallamos cada parte de la definición:\n\n**R es un lenguaje de programación estadístico**\n\nR es un lenguaje de programación, con sus estructuras y reglas de sintaxis, que posee una gran variedad de funciones desarrolladas con fines estadísticos.\n\n**R es un lenguaje Orientado a Objetos**\n\nImplementa conceptos de la programación orientada a objetos y esto\nle permite ser simple y flexible en el manejo de datos. En R\ntodo con lo que trabajamos es considerado un \"objeto\": las variables, funciones, datos, resultados, etc. que pueden ser modificados por otros objetos.\n\n**R es un lenguaje interpretado**\n\nNo es necesario compilar los scripts de programación para construir\nejecutables sino que directamente se ejecutan por medio del intérprete que  devuelve resultados de forma inmediata.\n\n**R es multiplataforma (corre en Linux, Windows y Mac)**\n\nFunciona en diferentes sistemas operativos como Linux, Windows y Mac. \n\n**R es Open Source y se distribuye bajo licencia GNU - GPL**\n\nEsto quiere decir que se distribuye gratuitamente bajo licencia GNU\n(General Public License) -- GPL y que los usuarios tienen la libertad de\nusar, estudiar, compartir (copiar) y modificar el software.\n\n## Breve historia \n\nR fue desarrollado a partir del lenguaje S que tiene sus orígenes en Bell Labs de la AT&T (actualmente Lucent Technologies) de mediados de la década del '70. Posteriormente, S fue vendido y dio origen a una versión propietaria denominada S-Plus que es comercializada por Insighful Corporation.\n\nEn 1995 dos profesores de estadística de la Universidad de Auckland, en\nNueva Zelanda [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka) y [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)), iniciaron el [\"Proyecto\nR\"](https://en.wikipedia.org/wiki/R_(programming_language)), con la intención de desarrollar un programa estadístico inspirado en el lenguaje S pero de dominio público.\n\nAunque se dice que R es un dialecto de S existen diferencias importantes\nen el diseño de ambos lenguajes.\n\nEl software está desarrollado en lenguaje C++ con algunas rutinas\nagregadas en Fortran) y su nombre se debe a la letra con la que inician\nlos nombres de pila de sus autores (Ross y Robert).\n\nActualmente es mantenido por un grupo internacional de desarrolladores\nvoluntarios denominado [Core Development Team](https://www.r-project.org/contributors.html).\n\n## Scripts\n\nUn script es un archivo de texto plano con una lista secuencial de\nfunciones y comandos del lenguaje R para ser ejecutado por el intérprete\nde R.\n\nScript se puede traducir como guión, archivo de órdenes, archivo de\nprocesamiento por lotes o archivo de sintaxis.\n\nGeneralmente se crea en editores especiales y/o en cualquier procesador básico de texto plano. Se almacena en un archivo que puede ser leído,\nmodificado, guardado y se puede ejecutar completo o línea a línea.\n\nPoseen una cualidad muy provechosa: son re-utilizables, adaptándolos a\notras necesidades.\n\n**Documentación de los scripts de R:**\n\nLa documentación es una tarea de mucha importancia en cualquier lenguaje\nde programación, ya que nos permite entender que estamos haciendo en el\nscript. Además nos sirve para el futuro mantenimiento o para la\nreutilización del código elaborado, tanto para otros usuarios como para\nnosotros mismos.\n\nLa forma de documentar los scripts de código en R es utilizando\ncomentarios. Toda línea que comienza con el símbolo `#` es entendido por\nel interprete como un comentario y los caracteres que sigan a ese\nsímbolo no seran tenidos en cuenta cuando se ejecute ese código.\n\n```{r}\n# esto es una línea de comentario y no es tenida en cuenta por el intérprete\n```\n\nAsí que a la hora de documentar es preferible abusar de estos\ncomentarios que no utilizarlos.\n\n## Funciones\n\nLos comandos u órdenes elementales de R se denominan **funciones**. A algunas se las llama \"integradas\" porque están incluidas en el núcleo (R base) y sus nombres están reservados.\n\nTambien podemos utilizar otras pertenecientes a librerías (paquetes) que se pueden instalar y activar.\n\nToda función tiene un nombre y normalmente recibe argumentos o\nparámetros que deben ser escritos **entre paréntesis y separados por comas**. Incluso algunas de ellas que no tienen asociado ningún argumento necesitan finalizar con paréntesis `()` para ser entendidas como funciones.\n\nSiempre una función devuelve un resultado, un valor o realiza una\nacción.\n\n```{r,echo=F,  fig.align='center', out.width = \"50%\"}\nknitr::include_graphics(\"img/01/funciones.JPG\")\n```\n\nComo el interprete de R no permite errores en la sintaxis de las expresiones, debemos atender a los siguientes puntos a la hora de escribirlas:\n\n-   La sintaxis habitual de una función y sus argumentos es la siguiente:\n\n```{r, eval=F}\nfuncion(arg1, arg2, arg3,...)\n```\n\n-   Los títulos de los argumentos pueden escribirse y mediante un igual\n    agregar el valor correspondiente. También se puede omitir el título\n    del argumento y escribir directamente el valor, pero en este caso,\n    hay que respetar el orden definido por la función.\n\n```{r, eval=F}\nfuncion(arg1=32, arg2=5, arg3=65,...)\n```\n\nes igual a hacer:\n\n```{r, eval=F}\nfuncion(32, 5, 65,...)\n```\n\nsiempre que se respete el mismo orden.\n\n-   Con los argumentos se deben cumplir las mismas reglas que en todo el\n    lenguaje. Los valores numéricos, lógicos, especiales y objetos van\n    escritos en forma directa y cuando escribimos caracteres (texto) van\n    necesariamente encerrados entre comillas.\n\n```{r, eval=F}\nfuncion(arg1=3, arg2=NA, arg3=TRUE, arg4=\"less\", arg5=x,...)\n```\n\n## Librerías (paquetes)\n\nLas librerías son grupos de funciones empaquetados que se pueden\ninstalar y utilizar en el análisis de datos. Habitualmente se agrupan\npor tema o similitud de funciones.\n\nEstos paquetes se pueden descargar directamente del repositorio oficial\nde CRAN en Internet (similar al uso de los repositorios de Linux) o bien\ndescargar en formato .zip para luego instalar y usar.\n\nSe pueden activar y desactivar en cualquier momento del análisis.\n\nAlgunos poseen dependencias de otros paquetes que serán necesarios para\nque funcione.\n\n## Sintaxis, errores y advertencias\n\nEl lenguaje es muy preciso en su sintaxis y equivocarse en la forma de escribir una función o cualquier otro objeto produce respuestas de error del interprete de R que es habitual cuando iniciamos el aprendizaje.\n\nLa exactitud en la escritura de comandos y funciones incluye la\ndistinción entre mayúsculas y minúsculas. Es decir, que no es lo mismo una 'a' que una 'A'.\n\nExisten tres grupos de mensajes de error:\n\n- error de sintaxis\n- error de objeto no encontrado\n- otros errores\n\nSe dice que hay un error de sintaxis, cuando ejecutamos una línea de código que el motor de R no puede interpretar debido a que algo está mal escrito.\n\nHabitualmente los errores de sintaxis se deben a que falta o sobra algún elemento necesario en la estructura de una función (comas, parentesis, llaves, corchetes, comillas, etc.)\n\nPor ejemplo la función `rep()` repite valores una cantidad de veces. Tiene dos argumentos, `x` donde se coloca el valor a repetir y `times` donde se define la cantidad de veces.\n\n\n```{r}\nrep(x = 3, times = 4) #repetimos 4 veces 3 con rep()\n```\n\nSi nos olvidamos de cerrar el paréntesis...\n\n```{r, eval=FALSE}\nrep(x = 3, times = 4\n    \nError: Incomplete expression: rep(x = 3, times = 4\n```\nSi nos olvidamos de separar los argumentos con la coma\n\n```{r, eval=FALSE}\nrep(x = 3 times = 4)\n\nError: unexpected symbol in \"rep(x =3 times\"\n```\nSi en lugar de escribir x como primer argumento y escribimos otra letra...\n\n\n```{r, eval=FALSE}\nrep(y =3, times = 4)\n\nError in rep(y = 3, times = 4) : \n  attempt to replicate an object of type 'symbol'\n```\nSi escribimos mal la función...\n\n```{r, eval=FALSE}\nREP(x =3, times = 4)\n\nError in REP(x = 3, times = 4) : no se pudo encontrar la función \"rop\"\n```\nEsta última posibilidad es similar a un \"objeto no encontrado\" por **error de sintaxis**.\n\nLos mensajes de error en general y sobre todo al principio pueden parecer extraños y difíciles de entender, pero con un poco de práctica podemos inferir donde está el problema.\n\nLos errores de **objetos no encontrados** pueden tener una de varias causas:\n\n- el nombre no se escribió correctamente (p.ej.: sintaxis, mayúsculas / minúsculas)\n- el paquete o archivo que contiene el objeto no ha sido cargado\n- olvidamos poner comillas en un lugar que corresponde \n- otros motivos posibles\n\nVolvamos al ejemplo anterior, ahora repitiendo un valor tipo character\n\n```{r}\nrep(x = \"A\", times = 4) #repetimos 4 veces 3 con rep()\n```\nSi olvidamos las comillas...\n\n```{r, eval=FALSE}\nrep(x = A, times = 4) #repetimos 4 veces 3 con rep()\n\nError: objeto 'A' no encontrado\n```\n\n**Advertencias**\n\nUna advertencia no es algo tan serio, como un error, o al menos no lo parece, ya que esta permite que la función se ejecute igual. Pero puede ocurrir que ignorar una advertencia llegue a ser algo muy serio, si esto implica que la salida de la función es equivocada.\n\nPor lo tanto, es una buena política entender los mensajes de advertencia para ver si indican problemas para preocuparnos o no.\n\nResumiendo:\n\n```{r,echo=F,  fig.align='center', out.width = \"60%\"}\nknitr::include_graphics(\"img/01/errores_advertencias.PNG\")\n```\n\n\n## Creación de objetos \n\nTodas las declaraciones donde se crean objetos, tienen este símbolo de asignación `<-`. \n\n```{r, eval=F}\nnombre_objeto <- valor\n```\n\nVeámoslo en un ejemplo:\n\n```{r}\na <- 1\n```\n\nEn este caso asignamos el valor 1 al objeto `a`. El objeto `a` es un vector de una posición (un solo valor).\n\nSi llamasemos al objeto `a`, el interprete nos devuelve el valor\nasignado previamente.\n\n```{r}\na\n```\n\nObservemos que además de devolvernos el valor aparece delante un 1 entre corchetes `[1]`.Este número es la ubicación o índice del comienzo del objeto, que en este caso tiene una sola posición. \n\n## Estructuras de datos\n\nLos objetos *contenedores de datos* más simples pertenecen a **cinco\nclases** que se denominan *atómicas* y que son los siguientes tipos de\ndatos:\n\n-   integer (números enteros)\n-   numeric / double (números reales)\n-   complex (números complejos)\n-   chacacter (cadena de caracteres)\n-   logical (lógicos o booleanos -- toman valores por si o no)\n\n```{r,echo=F,  fig.align='center', out.width = \"80%\"}\nknitr::include_graphics(\"img/01/tipo_datos.JPG\")\n```\n\n\nSin embargo, cada una de estas clases de datos no se encuentran de\nmanera aislada, sino encapsulados dentro de la clase de objeto\noperacional más básica del lenguaje a la que se denomina **vector**.\n\n**Vector**\n\nUn vector es un conjunto de valores (números o símbolos), todos del\nmismo tipo ordenados de la forma (elemento 1, elemento 2, ... , elemento\n$n$) y $n$ es la longitud o tamaño del vector.\n\nSurge de la definición dos términos importantes: el tipo y la longitud.\n\nTodos los objetos de datos tienen estos dos atributos intrínsecos.\n\n-   el tipo, que puede ser integer, numeric, chacacter, complex y\n    logical\n-   la longitud, que es el número de elementos que contiene el objeto.\n\nEl vector más simple es el que contiene un dato, podría ser numérico de\nun solo dígito. El tipo sería numeric y la longitud 1.\n\n```{r}\nvec1 <- 1\nvec1\n```\n\nOtro vector más grande por ejemplo podría ser (1,5,2). En este caso\ntambién es del tipo numeric pero tiene una longitud de 3 elementos (3\nposiciones que integran el vector).\n\n```{r}\nvec2 <- c(1,5,2)\nvec2\n```\n\nComo vemos, para concatenar estos tres valores numéricos usamos la forma\n`c()`. Esta `c` es una función de R, justamente para concatenar. (todo\nlo que aparece siempre antes de paréntesis es una función). Dentro de la\nfunción los valores van separados por comas.\n\nAquí podemos señalar otra característica, según la definición de vector,\nla colección de elementos se encuentra ordenada, por lo que en nuestro\nejemplo la primera posición la ocupa el 1, la segunda el 5 y la tercera\nel 2. Como el orden importa, si tuviese otro vector (5,1,2), a pesar de\ntener los mismos elementos no sería el mismo vector porque están\nordenados de forma diferente.\n\nPara ver la longitud del vector usamos:\n\n```{r}\nlength(vec2)\n```\n\nNos informa que `vec2` tiene 3 elementos.\n\nAsimismo podemos ver que los datos almacenados en este segundo ejemplo\ncumplen con la definición en lo que respecta al tipo de dato, ya que\ncada elemento es del mismo tipo (numeric).\n\nPara conocer la clase del dato ejecutamos:\n\n```{r}\nclass(vec2)\n```\n\nVeamos un ejemplo de asignación de otro tipo de dato atómico, como es el\ncharacter:\n\n```{r}\nvec3 <- \"Hola\"\nvec3\n```\n\nSiempre que escribamos contenido de tipo caracter debemos hacerlo entre\ncomillas. En este caso generamos el vector `vec3` con el contenido\n\"Hola\". A pesar de ser una palabra que, por supuesto, esta compuesta de\nvarios caracteres, dentro del vector `vec3` esta ocupa una sola\nposición.\n\n```{r}\nlength(vec3)\n```\n\nRespecto a la clase del dato si usamos la función `class()` tendremos:\n\n```{r}\nclass(vec3)\n```\n\n**Dataframe**\n\nUn dataframe es un objeto cuya finalidad es contener conjuntos de datos.\nSe asemeja a una tabla que tiene filas y columnas (dos\ndimensiones), donde cada columna puede almacenar\nelementos de diferentes tipos.\n\nAdemás las columnas suelen tener nombres únicos y podemos referenciarlas\npor estos nombres, como si fueran variables del conjunto de datos.\n\nEs el tipo de objeto que utilizamos para almacenar información leída de\ntablas de datos provenientes de archivos externos (formato texto\nseparado por comas, Excel, etc) y con las cuales acostumbramos a\ntrabajar en el análisis.\n\nDesde el punto de vista de su estructura, todo dataframe esta conformado\npor una serie de vectores de la misma longitud ubicados verticalmente\nuno al lado de otro.\n\nPodemos verlo en la siguiente porción de código:\n\n```{r}\nHC <- c(\"F324\", \"G21\", \"G34\", \"F231\")\nedad <- c(34,32,34,54)\nsexo <- c(\"M\", \"H\", \"H\", \"M\")\n\ndf1 <- data.frame(HC, edad, sexo)\n\ndf1\n```\n\nCreamos tres vectores con datos de supuestos individuos, su historia\nclinica, la edad y el sexo. Luego mediante la función `data.frame()`\n\"unimos\" esos vectores en forma vertical para formar un dataframe de 3\nvariables y 4 observaciones.\n\nExisten otras estructuras de datos que aparecen en la siguiente figura. Las más habituales en nuestro trabajo son los vectores y los dataframes.\n\n```{r,echo=F,  fig.align='center', out.width = \"55%\"}\nknitr::include_graphics(\"img/01/objetos_R.png\")\n```\n\n\n## Operadores en R\n\nAdemás de funciones, el lenguaje R cuenta con operadores similares a otros lenguajes de programación, que permiten realizar operaciones con datos.\n\n### R como calculadora\n\nEl lenguaje R cuenta con operadores aritméticos de uso relativamente intuitivo, que permiten realizar operaciones matemáticas como si usasemos una calculadora.\n\n\n```{r,echo=F,  fig.align='center', out.width = \"45%\"}\nknitr::include_graphics(\"img/01/op_aritmeticos.JPG\")\n```\n\n```{r}\n# suma\n2 + 5\n\n# resta\n3 - 2\n\n# multiplicación\n9 * 3\n\n# división\n10 / 2\n\n# potenciación\n5 ^ 2\n```\n\n**Nota**: observarán que el interprete del lenguaje al devolvernos un valor en consola lo muestra con una notación inicial de un 1 encerrado entre corchetes `[1]`.\nEste número es el índice del vector que nos está mostrando R y que siempre comienza con 1. Si la cantidad de elementos de un vector mostrados por la consola superase el ancho de la pantalla, entonces el listado seguiría debajo y al comienzo de la nueva línea veríamos otro número entre corchetes que sería el indice de ese primer valor. Veamos un ejemplo:\n\n```{r, echo=F}\nseq(from=0.1, to=0.9,by = 0.01)\n\n\n```\nEl 0.25 que es primer valor de la segunda fila esta en la posición 16 de ese vector de números. Y, por ejemplo, el 0.70 en la posición 61.\n\nPara otras operaciones matemáticas como la raíz cuadrada o el valor absoluto de un múmero, existen funciones específicas incluídas en R base.\n\n```{r}\n# radicación (raíz cuadrada)\nsqrt(9)\n\n# valor absoluto\nabs(-3)\n```\n\nTambién se pueden hacer operaciones con los objetos que almacenan a estos valores numéricos asignados:\n\n```{r}\n# a contiene el valor 3\na <- 3\n\n# b contiene el valor 6\nb <- 6\n\n# aplicamos una fórmula determinada\n(a + b) * b\n```\n\nY funciona con objetos como los vectores que contienen más de un elemento, aplicando **artimética vectorial**, donde las operaciones se realizan elemento a elemento.\n\n```{r}\n# creamos el vector a con 3 elementos\na <- c(1, 2, 3)\n\n# ejecutamos una operación matemática a todos los elementos de a\na * 3\n```\n\nO bien, con operaciones entre objetos, donde se las operaciones se realizan entre los elementos de la misma posición:\n\n```{r}\n# creamos el vector a con 3 elementos\na <- c(1, 2, 3)\n\n# ejecutamos una operación matemática a todos los elementos de a * a\na * a\n```\n\nMediante `sum()` se puede hacer sumatorias de elementos en  vectores numéricos.\n\n```{r}\n# creamos el vector a con 3 elementos\na <- c(1, 2, 3)\n\n# realizamos una sumatoria de todos los elementos de a\nsum(a)\n```\n\nOtra función muy utilizada es la que permite que redondeemos valores con decimales.\n\n```{r}\n## redondeamos definiendo 2 digitos decimales\n\nround(23.76859, digits = 2)\n```\n\n\n## Concatenación y secuencias regulares\n\nYa usamos la función `c()` para concatenar elementos. Habitualmente cuando  deseemos crear vectores con más de un elemento vamos a recurrir a esta función.\n\n```{r}\n# vector numérico de 4 elementos\nc(6, 3, 6, 8)\n\n# vector caracter de 2 elementos\nc(\"Hola\", \"Chau\")\n\n```\n\nExiste otra forma de concatenar elementos a partir de un operador de rango.\nProduce un intervalo secuencial de enteros que puede ser ascendente o descendente.\nEl operador es `:` y se usa de la siguiente forma:\n\n```{r}\n# ascendente\n1:10\n\n# descendente\n10:1\n```\n\nOtra manera es por medio de la función `seq()` que tiene como argumentos principales *from*, *to* y *by*\n\n```{r}\n# secuencia de 1 a 20 cada 2\nseq(from = 1, to = 20, by = 2)\n```\n\nAlgunos otros ejemplos de la misma función pueden ser:\n\n```{r}\n# secuencia de 0.1 a 0.9 cada 0.1\nseq(from = 0.1, to = 0.9, by = 0.1)\n\n# secuencia de -5 a 5 cada 1\nseq(from = -5, to = 5, by = 1)\n\n# secuencis de 300 a 0 cada 50 (se escribe -50 porque es descendente)\nseq(from = 300, to = 0, by = -50)\n```\n\nFinalmente la última posibilidad que vamos a mostrar es la función `rep()` que repite valores. Su forma más sencilla es `rep(x, times = Nº)` que coloca un Nº de repeticiones de x, una tras otra.\n\nAlgunos ejemplos de la función:\n\n```{r}\n# repetimos 5 veces el número 2\nrep(x = 2, times = 5)\n\n# combinada con el operador de rango\nrep(1:4, 5)  \n\n# combinada con la función de concatenación\nrep(c(4.5,6.8,7.2), 2) \n```\n\n\nTambién existen **operadores relacionales** y **conectores lógicos** que vamos a ver más adelante, cuando por ejemplo, necesitemos construir condiciones para filtrar subconjuntos de datos.\n\n## Valores especiales en R\n\nExisten algunos valores especiales para datos con expresiones reservadas\nen R, entre ellos encontramos los valores NA, NaN, Inf y NULL.\n\n```{r,echo=F,  fig.align='center', out.width = \"60%\"}\nknitr::include_graphics(\"img/01/valores_esp.JPG\")\n```\n\n\nEl más relevante de estos valores especiales es el NA que sirve para\nindicar la inexistencia de valor.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"link-external-filter":"^https:\\/\\/(www\\.)?(linkedin|twitter|github)\\.*"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":[{"text":"<link rel=\"icon\" type=\"image/x-icon\" href=\"img/favicon.ico\">\n"}],"toc":true,"output-file":"01-introR.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"Contenido","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.54","theme":{"light":["pulse","../../custom.scss"],"dark":"darkly"},"code-copy":true,"anchor-sections":false,"title":"**Introducción al lenguaje R**","number_sections":true,"anchor_sections":true,"page-layout":"full","toc-title":"Contenidos","toc-location":"left","toc_float":true,"toc_collapsed":false,"toc_depth":4},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}